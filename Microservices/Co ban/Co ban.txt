Microservices là gì?--MICROSERVICE:

	Vậy Microservices là gì nhỉ?--Microservices là gì:
			
			Thực tế có nhiều định nghĩa khác nhau đối với Microservices nhưng hiểu theo cách đơn giản thì, microservice là một kiếu kiến trúc
			phần mềm. Các module trong phần mềm này được chia thành các service rất
			nhỏ (microservice). Mỗi service sẽ được đặt trên một server riêng -> dễ dàng để nâng cấp và scale ứng dụng.
	
	Monolith Application là gì?--Microservices là gì:
	
			Bạn đã bao giờ từng làm việc trong những dự án có đặc điểm như sau chưa?
				
				Release vài tháng 1 lần
				Có các đặc điểm và chức năng bao phủ phạm vi rộng
				Team size lớn
				Việc debug trở thành thử thách lớn
				Khó khăn để ứng dụng các công nghệ mới
				
				Đó chính là những đặc điểm của Monolith Application
			
			Các ứng dụng Monolith thường rất lớn - thường sẽ có size hơn 100.000 dòng code. Trong một số trường hợp
			thậm chí có hơn một triệu dòng code.
			
			Khi xây dựng phần mềm theo kiến trúc monolith (một khối). Toàn bộ các module (view, business, database, report)
			đều được gom chung vào một project lớn. Khi deploy, chúng ta sẽ quăng khối code này lên server
			và config để nó chạy.
			
			Kiến trúc này hoạt động khá ngon vì nó đơn giản, dễ code. Tuy nhiên, khi phần mềm trở nên lớn và phức tạp thì nó
			lại dần bộc lộ nhược điểm. Do các module đóng với nhau thành một bánh, khi muốn nâng cấp
			một module, ta phải deploy lại toàn bộ code (người dùng cuối sẽ không sử dụng được toàn bộ các chức năng của hệ
			thống khi deploy); khi muốn phục vụ nhiều người dùng, ta phải nâng cấp server...
			
			Các thử thách đối với Monolith Application
				
				Scalability
				Ứng dụng các công nghệ mới
				Ứng dụng automation test
				Áp dụng quy trình làm việc - Agile?
				Thích ứng với thực tiễn phát triển hiện đại
				
				...
			Một dịch vụ gọi taxi qua di động, với business logic được thể hiện bởi các khối dịch vụ, đối tượng cho từng vùng
			nghiệp vụ (domain objects) và các sự kiện (events: khách đặt xe, khách hủy xe, xe nhận
			khách...)Xung quanh lõi là bộ chuyển đổi (adapter) ví dụ như kết nối vào cơ sở dữ liệu, gửi nhận thông điệp
			(messaging), web service hoặc giao diện web front end.
			
			Trong nhiều trường hợp, người ta có thể xây dựng các services độc lập nhưng chúng lại được triển khai chung. Mặc
			dù có cấu trúc module hóa hợp lý, nhưng ứng dụng kiểu này sẽ đóng gói và cài đặt thành một
			khối (monolithic). Mã chạy cụ thể tùy thuộc vào ngôn ngữ lập trình hay thư viện framework.
			
			Tương tự như ứng dụng monolithic, những services này to và phức tạp lên theo thời gian vì thường xuyên thêm các
			tính năng. Và thế là những ứng dụng này lại trở thành một mớ các services monolithic, cũng
			không còn khác mấy so với kiến trúc một khối thông thường. Hình trên thể hiện một ứng dụng gồm nhiều services. Những
			services này được triển khai cùng một lúc vào 1 ứng dụng lớn. Dù bên trong có gồm các
			services thì đây là một ứng dụng monolithic. Một số tính chất của kiến trúc một khối:
			
				Được thiết kế, phát triển và triển khai theo một khối duy nhất
				Ứng dụng monolithic phức tạp và to gây khó khăn cho việc bảo trì, nâng cấp và thêm tính năng mới
				Khó áp dụng phát triển kiểu agile
				Phải triển khai lại toàn bộ hệ thống dù chỉ cập nhật hay nâng cấp một phần
				Mở rộng: phải mở rộng cả khối ứng dụng, gặp khó khăn nếu có các yêu cầu về tài nguyên khác nhau (ví dụ một service
				yêu cầu thêm CPU, service khác lại yêu cầu nhiều memory)
				Độ tin cậy: một service không ổn định có thể sập cả hệ thống
				Khó đổi mới: ứng dụng monolithic phải sử dụng chung công nghệ nên khó thay đổi hay áp dụng công nghệ mới.
	
	Kiến trúc dịch vụ nhỏ (Microservices Architecture)--Microservices là gì:
	
			Khác biệt với kiến trúc Monolith, thay vì gom tất cả module thành một khối (monolith), ta tách các module thành những service
			siêu nhỏ. Mỗi service sẽ được đặt trên một server riêng (Có thể dùng server cloud
			như AWS hoặc Azure), giao tiếp với nhau thông qua mạng (Gửi nhận message qua giao thức HTTP hoặc sử dụng MessageQueue)...
			
			Nền tảng cả kiến trúc microservices là xây dựng một ứng dụng mà ứng dụng này là tổng hợp của nhiều services nhỏ và độc lập
			có thể chạy riêng biệt, phát triển và triển khai độc lập.
			
			Ta có thể giải quyết các vấn đề của ứng dụng một khối bằng kiến trúc microservices (nhiều dịch vụ nhỏ). Ý tưởng là chia nhỏ
			ứng dụng lớn ra thành các dịch vụ nhỏ kết nối với nhau.
			
			Mỗi dịch vụ nhỏ thực hiện một tập các chức năng chuyên biệt như quản lý đơn hàng, quản lý khách hàng. Mỗi dịch vụ là một ứng
			dụng nhỏ có kiến trúc đa diện lõi là business logic kết nối ra các adapter khác
			nhau. Một số dịch vụ nhỏ lộ ra giao tiếp lập trình API cho dịch vụ nhỏ khác hay ứng dụng client gọi tới. Khi vận hành, mỗi dịch
			vụ nhỏ được chạy trong một máy ảo hoặc Docker container.
			
			Mỗi vùng chức năng giờ được thực thi bởi một dịch vụ nhỏ. Ứng dụng web cũng có thể chia nhỏ hơn chuyên cho từng đối tượng người
			dùng (hành khách/tài xế). Thiết kế giao diện cho từng đối tượng người dùng
			giúp tối ưu trải nghiệm tốt hơn, tốc độ nhanh hơn, dễ tương thích hơn trong khi chức năng tối giản hơn.
			
			Một số khái niệm về microservices nói về quá trình chia tách ứng dụng monolithic thành nhóm các services độc lập. Tuy nhiên, theo
			quan điểm của tôi, microservices không chỉ về chia tách các servcies sẵn có
			trong monolithic.
			
			Điều quan trọng chính là nhìn vào các tính năng trong một ứng dụng monolithic, ta có thể nhận biết, xác định các yêu cầu và khả
			năng cần thiết để đáp ứng một nghiệp vụ. Sau đó từng nghiệp vụ này sẽ được xây
			dựng thành những service nhỏ, độc lập. Những services này có thể sử dụng các nền tảng công nghệ khác nhau và phục vụ một mục đích
			cụ thể và có giới hạn.
	
	Và một phần mềm xây dựng theo kiến trúc Microservices trông sẽ như nào?--Microservices là gì:
	
			Hình dưới đây sẽ minh họa cho việc phần mềm được xây dựng theo kiến trúc Monolith, một ứng dụng sẽ chứa tất cả các thành phần
			Còn hình dưới sẽ minh họa việc ứng dụng ở trên khi được xây dựng theo kiến trúc Microservices
			Kiến trúc Microservice bao gồm một số thành phần nhỏ, được thiết kế tốt và tương tác qua các message.
	
	Các ưu điểm của Kiến trúc Microservices--Microservices là gì:
	
			Hiện nay, các ứng dụng thường rất lớn và liên tục được update ví dụ như facebook, linkin,... . Với kiến trúc monolith, việc gom
			toàn bộ ứng dụng vào một khối làm việc nâng cấp trở nên khó khăn và mất thời
			gian. Để giải quyết vấn đề đó, các ứng dụng lớn cần thiết được tách ra thành các service nhỏ. Mỗi service quản lý một cơ sở dữ
			liệu riêng, nằm trên một server riêng, tách biệt hoàn toàn với nhau. Các ưu
			điểm như sau:
			
				- Điều quan trọng nhất là rất dễ nâng cấp và scale up, scale down. Giả sử bạn làm một trang web liên quan tới vận tải, kho
				bãi. Khi số lượng xe hay hàng hóa tăng lên, chỉ việc nâng cấp server cho service
				liên quan đến nghiệp vụ kho vận(ngược lại, có thể giảm server nếu cần thiết). Với cloud computing, việc nâng cấp server vô
				cùng dễ dàng chỉ với vài cú click chuột. Điều này rất khó thực hiện với monolith.
				- Do tách biệt nên nếu một service bị lỗi, toàn bộ hệ thống vẫn hoạt động bình thường. Với monolith, một module bị lỗi có
				thể sẽ kéo sập toàn bộ hệ thống.
				- Các service nằm tách biệt nhau, chúng có thể được sử dụng các ngôn ngữ lập trình riêng, database riêng. VD service xử lý
				ảnh có thể viết bằng C++, service tổng hợp data có thể viết bằng Python.
				- Có thể áp dụng được các quy trình tự động hóa, như build, deploy, monitoring,...
				- Khi chia nhỏ các service, team size sẽ giảm và mọi người sẽ làm việc hiệu quả hơn
				- Cho phép dễ dàng continuous delivery và deployment các ứng dựng lớn, phức tạp:
				-  Cải thiện khả năng bảo trì - mỗi service tương đối nhỏ do đó dễ hiểu và thay đổi hơn
				- Khả năng testing dễ dàng hơn - các services nhỏ hơn và nhanh hơn để test
				...
	Tuy nhiên không phải là không có nhược điểm--Microservices là gì:
	
			- Các module giao tiếp qua mạng nên có thể tốc độ không cao bằng monolith. Ngoài ra, mỗi module phải tự giải quyết các vấn đề về
			bảo mật, transaction, lỗi kết nối, quản lý log files.
			- Việc đảm bảo tính đồng nhất trong dữ liệu sẽ trở nên phức tạp hơn
			- Sử dụng nhiều service nên việc theo dõi, quản lý các service này sẽ phức tạp hơn
			- Cần một đội ngũ thật ngon để thiết kế và triển khai bao gồm software architect xịn
			- Các nhà phát triển phải đối phó với sự phức tạp của việc tạo ra một hệ thống phân tán
			- Cần implement việc communication giữa các inter-services
			- Handle partial failure là rất phức tạp vì một luồng xử lý cần đi qua nhiều services
			- Việc thực hiện các requests trải rộng trên nhiều services khó khăn hơn, điều này cũng đòi hỏi sự phối hợp cẩn thận
			giữa các teams
			- Khó khăn trong việc đảm bảo toàn vẹn CSDL nếu triển khai theo kiến trúc cơ sở dữ liệu phân vùng
			- Triển khai và quản lý microservices nếu làm thủ công theo cách đã làm với ứng dụng một khối phức tạp hơn rất nhiều
			- Phải xử lý sự cố khi kết nối chậm, lỗi khi thông điệp không gửi được hoặc thông điệp gửi đến nhiều đích đến vào các
			thời điểm khác nhau
	
	Một số điều cần lưu ý khi thiết kế Microservices--Microservices là gì:
	
			Một số cách hiểu sai về Microservices
				
				- Số dòng code/ kích cỡ của một đội lập trình là chỉ số tồi: có vài cuộc bàn luận về kích thước của một service dựa
				vào số lượng dòng code hay kích thước của đội phát triển service đó (ví dụ two-pizza
				team).Tuy nhiên, những cách đo đếm này không thực tiễn và không chính xác, vì ta có thể phát triển services với ít
				dòng code hoặc với một đội nhỏ nhưng hoàn toàn vi phạm các nguyên tắc trong kiến trúc
				microservices.
				- "Micro" là một từ khóa dễ gây nhầm lẫn. Nếu bạn nghĩ rằng nên tạo ra services nhỏ hết mức thì đó là một cách hiểu sai.
				- Trong SOA, services thường trở thành các cục monolithic với nhiều hàm, chức năng khác hỗ trợ. Vì vậy, chỉ phát
				triển services kiểu SOA rồi dán nhãn microservices hoàn toàn lạc hướng và không mang lại bất
				kì lợi ích nào của kiến trúc microservices.
			
			Vậy cần tuân thủ điều gì?
				
				- Single Responsibility Principle (SRP): một service với phạm vi và chức năng giới hạn, tập trung vào một nhiệm vụ
				giúp quá trình phát triển và triển khai dịch vụ trở nên nhanh chóng hơn.
				- Trong quá trình thiết kế, ta nên xác định và giới hạn các services theo chức năng nghiệp vụ thực tế
				- Đảm bảo microservices có thể phát triển và triển khai độc lập
				- Mục tiêu của thiết kế là phạm vi của microservices phục vụ một nghiệp vụ chứ không chỉ đơn giản làm các dịch vụ
				nhỏ hơn. Kích thước hợp lý của một service là kích thước đủ để đáp ứng yêu cầu của một
				chức năng trong hệ thống.
				- Khác với services trong SOA, một microservice không nên có quá nhiều hàm hay chức năng hỗ trợ xung quanh và định
				dạng thông báo/ gửi tin (messaging) đơn giản.
	
	Làm thế nào để duy trì tính nhất quán dữ liệu?--Microservices là gì:
	
			- Thông thường, để đảm bảo tính độc lập mỗi service sẽ có một cơ sở dữ liệu riêng. Duy trì tính nhất quán dữ liệu giữa
			các services là một thách thức nên 2 phase-commit/distributed transactions không phải là
			một lựa chọn tối ưu. Thay vào đó, một ứng dụng nên sử dụng Saga partten.
			- Một service publishes một event khi dữ liệu của nó thay đổi. Các services khác consume event đó và cập nhật dữ liệu
			của chúng. Nếu một transaction thất bại, thì saga sẽ thực hiện một loạt các transactions
			để hoàn tác các transactions trước đó. Có một số cách đáng tin cậy để updating data và publishing các events là Event
			Sourcing và Transaction Log Tailing.
	
	Khi nào nên sử dụng kiến trúc Microservices?--Microservices là gì:
	
			- Việc xây dựng phần mềm theo kiến trúc nào hoàn toàn phụ thuộc vào phạm vi bài toán mà ứng dụng đó đặt ra, hiện tại thì
			theo đánh giá của mình Monolith phù hợp với các ứng dụng cỡ vừa và nhỏ,
			còn Microservices sẽ phù hợp với những ứng dụng lớn => chúng ta cần cân nhắc cẩn thận khi sử dụng để tránh trường hợp
			mang dao mổ trâu đi thịt gà
			- Khi phát triển phiên bản đầu tiên của ứng dụng, bạn thường không gặp phải các vấn đề mà Microservices giải quyết. Hơn
			nữa, sử dụng một kiến trúc phân tán, phức tạp sẽ làm chậm quá trình phát triển. Đây là
			một vấn đề rất lớn đối với các start-up vì họ cần phát triển nhanh mô hình kinh doanh cùng ứng dụng đi kèm. Vì vậy, theo
			tôi, trừ khi bạn có một hệ thống quá phức tạp để quản lý bằng Monolithic Architecture,
			hoặc bạn xác định tương lai của ứng dụng sẽ trở nên như vậy. Thì kiến trúc Monolithic vẫn đủ tốt đối với bạn.
	
	Thiết kế phần mềm theo kiến trúc Microservice--Microservices là gì:
	
			Mỗi microservice nên có một database riêng biệt
				
				- Việc này đảm bảo cho microservice có tính đóng gói cao. Tuy vậy việc phân tách nơi chứa dữ liệu cho mỗi microservice
				không hề đơn giản, nó là phần khó nhất trong việc thiết kế ứng dụng phần mềm theo kiến
				trúc microservice. Do đó, rất nhiều người chọn lựa thiết kế sử dụng chung database cho nhiều microservice.
				- Cách này tồn tại một hạn chế là khi database schema cần thay đổi cho microservice1 thì nó sẽ làm ảnh hưởng và gây
				lỗi cho các microservice khác sử dụng chung database này. Để sửa lỗi, ta cần sửa đổi,
				cập nhật toàn bộ microservice còn lại để chúng có thể hoạt động với schema mới.
				- Có một cách tiếp cận khác, giúp tránh được hạn chế trên.
				- Sơ đồ trên, microservice2 không truy cập trực tiếp vào database, thay vào đó nó truy cập database thông qua
				microservice1. Do đó việc thay đổi schema của database sẽ không ảnh hưởng tới
				microservice2. Tuy nhiên với cách tiếp cận này thì microservice2 phụ thuộc vào microservice1, khi microservice1
				có lỗi thì microservice2 cũng bị lỗi theo.
				- Việc chọn cách tiếp cận nào phụ thuộc rất nhiều vào tình hình thực tế của dự án. Cần cân nhắc thiệt hơn của mỗi
				phương án để đưa ra lựa chọn cuối cùng.
			
			Giữ source code của microservice ở mức hợp lý
				
				Như đã đề cập ở phần ưu và nhược điểm của microservice. Kích thước source code của một microservice không nên quá
				nhỏ hoặc quá lớn. Tuy nhiên cái khó ở đây là không có một con số định lượng cho kích
				thước của một microservice, nên thông thường việc quyết định kích thước của một microservice là do kinh nghiệm, cảm tính.
			
			Tạo build script cho mỗi microservice
				
				Build script có thể là một file bash hoặc Dockerfile để đóng gói microservice vào bên trong một docker image.
			
			Triển khai mỗi microservice bên trong một app (docker container)
			
				Việc triển khai mỗi microservice trong một docker container đem lại rất nhiều lợi ích cho việc triển khai và mở rộng
				ứng dụng cũng như việc phân chia tài nguyên phần cứng cho mỗi microservice. Hiện
				nay có rất nhiều công cụ hỗ trợ cho việc liên tục tích hợp, liên tục triển khai hệ thống microservice. Các công cụ
				này giúp tăng hiệu quả làm việc cho các lập trình viên, giảm thời gian phôi phối sản
				phẩm phần mềm, và các công cụ này đòi hỏi mỗi microservice được đóng gói trong một docker image và triển khai trên app.
			
			Stateless server
			
				- Khi một yêu cầu được gửi đến server thì một phiên làm việc (session) được mở ra, kèm theo đó là các thông tin của
				phiên. Stateless server là server không lưu thông tin của phiên. Mà thông tin về phiên
				được lưu ở một nơi khác, như caching server chẳng hạn.
				- Việc này rất quan trọng, bởi vì mỗi microservice thường được đóng gói thành một docker image. Khi muốn cập nhật một
				microservice, ta cập nhật docker image của nó, và khi chạy docker image
				mới (xóa bỏ container cũ và tạo container mới dựa trên image mới) thì toàn bộ thông tin của các phiên hoạt động trên
				container cũ sẽ bị mất, thông tin phiên thường bao gồm thông tin mà client gửi
				tới server, mất thông tin này là một lỗi vô cùng nghiêm trọng. Nếu container là stateless thì nó không lưu thông tin
				của các phiên nên không có gì để mất cả.	