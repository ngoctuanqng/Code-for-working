Standard--SPRING:
	Standard 1:
		Domain:
								import com.poscdx.odc.ampro015.domain.utils.Utils;
								import com.poscoict.base.share.util.json.JsonUtil;
								import lombok.*;
								import java.util.Date;
								import java.util.List;
								@Getter
								@Setter
								@Builder
								@NoArgsConstructor
								@AllArgsConstructor
								public class Pme00ProjectInfo {
									private String cdV;
									private List<String> searchCdv;
									private int period;
									private String koreaPm;
									private String vietnamPl;
									private List<String> searchStatus;
									private String status;
									private String framework;
									private Date startDate;
									private Date endDate;
									private String image;
									private String file;
									private String koreaPmName;
									private String koreaPmImage;
									private String vietnamPlName;
									private String vietnamPlImage;
									public Pme00ProjectInfo(String cdV) {
										this.cdV = cdV;
									}
									public String toJson() {
										return JsonUtil.toJson(this);
									}
									public static Pme00ProjectInfo fromJson(String json) {
										return JsonUtil.fromJson(json, Pme00ProjectInfo.class);
									}
									public Pme00ProjectInfo(Object[] objects) {
										this.cdV = (String) objects[0];
										this.period = (int) objects[1];
										this.koreaPm = (String) objects[2];
										this.vietnamPl = (String) objects[3];
										this.status = (String) objects[4];
										this.framework = (String) objects[5];
										this.startDate = (Date) objects[6];
										this.endDate = (Date) objects[7];
										this.image = Utils.applyEmployeeAvatarPath((String) objects[8],"Project");
										this.file = Utils.applyEmployeeAvatarPath((String) objects[9],"Project");
										this.koreaPmName = (String) objects[10];
										this.koreaPmImage = Utils.applyEmployeeAvatarPath((String) objects[11], "Employee");
										this.vietnamPlName = (String) objects[12];
										this.vietnamPlImage = Utils.applyEmployeeAvatarPath((String) objects[13], "Employee");
									}
								}
		
								package com.poscdx.odc.ampro015.domain.entity;
								import com.google.gson.annotations.JsonAdapter;
								import com.poscdx.odc.ampro015.domain.utils.DateUtils;
								import com.poscdx.odc.ampro015.domain.utils.Utils;
								import com.poscoict.base.share.util.json.JsonUtil;
								import lombok.*;
								import java.util.Date;
								@Getter
								@Setter
								@Builder
								@NoArgsConstructor
								@AllArgsConstructor
								public class Asset  {
									private int id;
									private String token;
									private String owner;
									private int duration;
									private String qrcode;
									private int status;
									private String createBy;
									@JsonAdapter(DateUtils.DateTypeAdapter.class)
									private Date createAt;
									private String updateBy;
									@JsonAdapter(DateUtils.DateTypeAdapter.class)
									private Date updateAt;
									@JsonAdapter(DateUtils.DateTypeAdapter.class)
									private Date deleteAt;
									private String ownerName;
									private String ownerImage;
									public String toJson() {
										return JsonUtil.toJson(this);
									}
									public static Asset fromJson(String json) {
										return JsonUtil.fromJson(json, Asset.class);
									}
									public Asset(Object[] objects) {
										this.id = (int) objects[0];
										this.token = (String) objects[1];
										this.owner = (String) objects[2];
										this.duration = (int) objects[3];
										this.qrcode = (String) objects[4];
										this.status = (int) objects[5];
										this.createBy = (String) objects[6];
										this.createAt = (Date) objects[7];
										this.updateBy =(String) objects[8];
										this.updateAt = (Date) objects[9];
										this.deleteAt = (Date) objects[10];
										this.ownerName = (String) objects[11];
										this.ownerImage = Utils.applyEmployeeAvatarPath((String) objects[12], "Employee");
									}
								}
		Store-Jpo:
								package com.poscodx.odc.ampro015.store.jpo;
								import com.poscdx.odc.ampro015.domain.entity.Pme00ProjectInfo;
								import com.poscdx.odc.ampro015.domain.utils.Utils;
								import lombok.Getter;
								import lombok.NoArgsConstructor;
								import lombok.Setter;
								import org.springframework.beans.BeanUtils;
								import javax.persistence.*;
								import java.util.Date;
								import java.util.List;
								import java.util.stream.Collectors;
								import java.util.stream.StreamSupport;
								@Getter
								@Setter
								@NoArgsConstructor
								@Entity(name = "Pme00ProjectInfo")
								@Table(name = "tb_pme00_project_info", schema = "VIVA-ODC")
								public class Pme00ProjectInfoJpo {
									@Id
									@Column(name = "CD_V")
									private String cdV;
									@Column(name = "PERIOD")
									private int period;
									@Column(name = "KOREA_PM")
									private String koreaPm;
									@Column(name = "VIETNAM_PL")
									private String vietnamPl;
									@Column(name = "STATUS")
									private String status;
									@Column(name = "FRAMEWORK")
									private String framework;
									@Column(name = "START_DATE")
									private Date startDate;
									@Column(name = "END_DATE")
									private Date endDate;
									@Column(name = "IMAGE")
									private String image;
									@Column(name = "FILE")
									private String file;
									@Transient
									private String koreaPmName;
									@Transient
									private String vietnamPlName;
									public Pme00ProjectInfoJpo(Pme00ProjectInfo domainEntity) {
										BeanUtils.copyProperties(domainEntity, this);
									}
									public Pme00ProjectInfo toDomain() {
										Pme00ProjectInfo domainEntity = new Pme00ProjectInfo();
										BeanUtils.copyProperties(this, domainEntity); // chuyển 1 dto thành 1 jpo
										return domainEntity;
									}
									public static List<Pme00ProjectInfo> toDomains(Iterable<Pme00ProjectInfoJpo> jpos) {
										return StreamSupport.stream(jpos.spliterator(), false).map(Pme00ProjectInfoJpo::toDomain).collect(Collectors.toList()); // Chuyển 1 list dto thành list jpo
									}
									@PostLoad
									private void addUrlPath() {
										if (image != null && !image.isEmpty() && !image.contains(Utils.UPLOAD_URL)) {
											image = Utils.applyEmployeeAvatarPath(image, "Project");
										}
										if (file != null && !file.isEmpty() && !file.contains(Utils.UPLOAD_URL)) {
											file = Utils.applyEmployeeAvatarPath(file, "Project");
										}
									}
								}								
		Service-Resource:
								package com.poscodx.odc.ampro015.service.rest;
								import com.poscdx.odc.ampro015.domain.entity.*;
								import com.poscdx.odc.ampro015.domain.lifecycle.ServiceLifecycle;
								import com.poscdx.odc.ampro015.domain.utils.Utils;
								import com.posco.reuse.common.logging.PosLogWriterIF;
								import com.posco.reuse.common.logging.PosLogger;
								import com.poscodx.odc.ampro015.service.PermissionValidation;
								import lombok.RequiredArgsConstructor;
								import org.springframework.security.access.prepost.PreAuthorize;
								import org.springframework.web.bind.annotation.*;
								import org.springframework.web.multipart.MultipartFile;
								import java.sql.SQLException;
								import java.util.ArrayList;
								import java.util.List;
								import java.util.Map;
								@CrossOrigin(origins = "*", allowedHeaders = "*")
								@RestController
								@RequestMapping("/project")
								@RequiredArgsConstructor
								public class Pme00ProjectResource {
									private final ServiceLifecycle serviceLifecycle;
									@PostMapping("/search-include-task")
									@PreAuthorize("hasAnyAuthority('GET_PROJECT,GET_PROJECT_OWNER')")
									public Map<String, Object> findProjectListWithTask(@RequestBody ProjectManagementDto dto,
																					   @RequestParam(required = false, defaultValue = "0", name = "pageNo") int pageNo,
																					   @RequestParam(required = false, defaultValue = "20", name = "pageSize") int pageSize) {
										PosLogger.developerLog(PosLogWriterIF.INFO, "Project -> " + dto, this);
										if (Utils.checkPermission("GET_PROJECT_OWNER")) {
											String id = Utils.getLoginUserDetail();
											if (id != null) {
												return this.serviceLifecycle.requestLevel2ProjectService().getProjectListWithTask(serviceLifecycle, dto, id, pageNo, pageSize);
											}
										}
										return this.serviceLifecycle.requestLevel2ProjectService().getProjectListWithTask(serviceLifecycle, dto, null, pageNo, pageSize);
									}
									@GetMapping(path = "/monitoring")
									@PreAuthorize("hasAnyAuthority('GET_PROJECT,GET_PROJECT_OWNER')")
									public Map<String, Object> findAllProjectMonitoring(@RequestParam(required = false, defaultValue = "0", name = "pageNo") int pageNo,
																						@RequestParam(required = false, defaultValue = "20", name = "pageSize") int pageSize) {
										if (Utils.checkPermission("GET_PROJECT_OWNER")) {
											String id = Utils.getLoginUserDetail();
											if (id != null) {
												return this.serviceLifecycle.requestLevel2ProjectService().getAllProjectListWithEmpId(serviceLifecycle, id, pageNo, pageSize);
											}
										}
										return this.serviceLifecycle.requestLevel2ProjectService().getAllProjectListWithEmpId(serviceLifecycle, null, pageNo, pageSize);
									}
									@PostMapping("")
									@PreAuthorize("hasAnyAuthority('ADD_PROJECT')")
									public List<Object> register(@RequestParam ("data") String dtoString,
															@RequestParam (value = "imageUpload", required = false) MultipartFile imageUpload,
															@RequestParam (value = "fileUpload", required = false) MultipartFile fileUpload) throws SQLException {
										ProjectManagementDto dto = ProjectManagementDto.fromJson(dtoString);
										return this.serviceLifecycle
												   .requestLevel2ProjectService()
												   .registerProject(serviceLifecycle, dto, imageUpload, fileUpload);
									}
									@PutMapping("")
									@PreAuthorize("hasAnyAuthority('UPDATE_PROJECT,UPDATE_PROJECT_OWNER')")
									public List<Object> modify(@RequestParam ("data") String dtoString,
														  @RequestParam (value = "imageUpload", required = false) MultipartFile imageUpload,
														  @RequestParam (value = "fileUpload", required = false) MultipartFile fileUpload) throws SQLException {
										ProjectManagementDto dto = ProjectManagementDto.fromJson(dtoString);
										if (!PermissionValidation.validateUpdateProject(dto)) {
											List<Object> result = new ArrayList<>();
											result.add(false);
											result.add(Utils.NO_PERMISSION);
											return result;
										}
										return this.serviceLifecycle
												   .requestLevel2ProjectService()
												   .modifyProject(serviceLifecycle, dto, imageUpload, fileUpload);
									}
									@DeleteMapping("")
									@PreAuthorize("hasAnyAuthority('DELETE_PROJECT,DELETE_PROJECT_OWNER')")
									public List<Object> delete(@RequestBody M00Codes030Id id) throws SQLException {
										ProjectManagementDto dto = serviceLifecycle.requestLevel2ProjectService()
																				   .findProjectById(serviceLifecycle, id);
										if (!PermissionValidation.validateDeleteProject(dto)) {
											List<Object> result = new ArrayList<>();
											result.add(false);
											result.add(Utils.NO_PERMISSION);
											return result;
										}
										return this.serviceLifecycle.requestLevel2ProjectService().deleteProject(serviceLifecycle, id);
									}
									@GetMapping("/search-pm-pl/{type}")
									public List<M00Employee> getKoreaPM (@PathVariable("type") String type,
																		 @RequestParam(value = "projectNumber", required = false) String projectNumber) {
										if (type.equals("pm")){
											return this.serviceLifecycle.requestPme00ProjectInfoService().getKoreaPM(projectNumber);
										}
										else if (type.equals("pl")) {
											return this.serviceLifecycle.requestPme00ProjectInfoService().getVietnamPL(projectNumber);
										}
										else
											return new ArrayList<>();
									}
									@GetMapping("/search-member/{cdV}")
									public List<M00Employee> findProjectMember(@PathVariable("cdV") String cdV) {
										return this.serviceLifecycle.requestLevel2ProjectService().getProjectMember(serviceLifecycle, cdV);
									}
								}
		Lifecyecle:
								package com.poscdx.odc.ampro015.domain.lifecycle;
								import com.poscdx.odc.ampro015.domain.spec.*;
								public interface ServiceLifecycle {
									Level2Service requestLevel2Service();
									Level3DashboardService requestLevel3DashboardService();
									AssetService requestAssetService();
									FieldService requestFieldService();
									ImageService requestImageService();
									M99DailyReportService requestM99DailyReportService();
									M00Codes030Service requestM00Codes030Service();
									M00TaskService requestM00TaskService();
									M00EmployeeService requestM00EmployeeService();
									Pme00EmployeeMeetingService requestPme00EmployeeMeetingService();
									Pme00MeetingService requestPme00MeetingService();
									Pme00MemberService requestPme00MemberService();
									Pme00ProjectInfoService requestPme00ProjectInfoService();
									Pme00AnnouncementService requestPme00AnnouncementService();
									Pme00DashboardSettingService requestPme00DashboardSettingService();
									Pme00EmployeeTaskService requestPme00EmployeeTaskService();
									Level2MeetingService requestBookingMeetingRoomService();
									M00Codes020Service requestM00Codes020Service();
									Level2ProjectService requestLevel2ProjectService();
									Level2QrCodeService requestLevel2QrCodeService();
									Level2TaskService requestLevel2TaskService();
									Pme00RoleService requestPme00RoleService();
									Pme00RoleUserService requestPme00RoleUserService();
									Pme00PasswordTokenService requestPasswordService();
									Pme00PermissionService requestPme00PermissionService();
									Pme00PerRoleService requestPme00PerRoleService();
									Level2EmployeeService requestLevel2EmployeeService();
									Pme00IssueManagementService requestPme00IssueManagementService();
									LogoutAccessTokenService requestLogoutAccessTokenService();
									S91MenuService requestS91MenuService();
									Pme00WorkingTimeService requestPme00WorkingTimeService();
									Cms06MenuService requestCms06MenuService();
									Cms06MediaService requestCms06MediaService();
									Cms06PostService requestCms06PostService();
									Cms06LanguageService requestCms06LanguageService();
									Cms06LanguageContentService requestCms06LanguageContentService();
									Cms06TagsService requestCms06TagsService();
									Cms06ContentTagsService requestCms06ContentTagsService();
									Level2WorkingTimeService requestLevel2WorkingTimeService();
									Pme00NotificationService requestPme00NotificationService();
									Pme00NotificationGroupService requestPme00NotificationGroupService();
									Pme00NotificationMemberService requestPme00NotificationMemberService();
									M00StandardDocumentService requestM00StandardDocumentService();
								}
		
								package com.poscodx.odc.ampro015.service.lifecycle;
								import com.poscdx.odc.ampro015.domain.spec.*;
								import com.poscdx.odc.ampro015.domain.store.Cms06ContentTagsStore;
								import lombok.RequiredArgsConstructor;
								import org.springframework.stereotype.Component;
								@Component
								@RequiredArgsConstructor
								public class ServiceLifecycle implements com.poscdx.odc.ampro015.domain.lifecycle.ServiceLifecycle {
									private final Level2ProjectService level2ProjectService;
									private final Level2Service level2Service;
									private final Level3DashboardService level3DashboardService;
									private final AssetService assetService;
									private final FieldService fieldService;
									private final ImageService imageService;
									private final M99DailyReportService m99DailyReportService;
									private final M00Codes030Service m00Codes030Service;
									private final M00TaskService m00TaskService;
									private final M00EmployeeService m00EmployeeService;
									private final Pme00EmployeeMeetingService pme00EmployeeMeetingService;
									private final Pme00MeetingService pme00MeetingService;
									private final Pme00MemberService pme00MemberService;
									private final Pme00ProjectInfoService pme00ProjectInfoService;
									private final Pme00AnnouncementService pme00AnnouncementService;
									private final Pme00DashboardSettingService pme00DashboardSettingService;
									private final Pme00EmployeeTaskService pme00EmployeeTaskService;
									private final Level2MeetingService bookingMeetingRoomService;
									private final M00Codes020Service m00Codes020Service;
									private final Pme00RoleService pme00RoleService;
									private final Pme00RoleUserService pme00RoleUserService;
									private final Pme00PermissionService pme00PermissionService;
									private final Pme00PasswordTokenService pme00PasswordTokenService;
									private final Pme00PerRoleService pme00PerRoleService;
									private final Level2TaskService level2TaskService;
									private final Level2QrCodeService level2QrCodeService;
									private final Level2EmployeeService level2EmployeeService;
									private final Pme00IssueManagementService pme00IssueManagementService;
									private final LogoutAccessTokenService logoutAccessTokenService;
									private final S91MenuService s91MenuService;
									private final Pme00WorkingTimeService pme00WorkingTimeService;
									private final Level2WorkingTimeService level2WorkingTimeService;
									private final Pme00NotificationService pme00NotificationService;
									private final Pme00NotificationGroupService pme00NotificationGroupService;
									private final Pme00NotificationMemberService pme00NotificationMemberService;
									private final M00StandardDocumentService m00StandardDocumentService;
									private final Cms06MenuService cms06MenuService;
									private final Cms06MediaService cms06MediaService;
									private final Cms06PostService cms06PostService;
									private final Cms06LanguageService cms06LanguageService;
									private final Cms06LanguageContentService cms06LanguageContentService;
									private final Cms06TagsService cms06TagsService;
									private final Cms06ContentTagsService cms06ContentTagsService;
									@Override
									public Level2ProjectService requestLevel2ProjectService() { return this.level2ProjectService; }
									@Override
									public Level2Service requestLevel2Service() {
										return this.level2Service;
									}
									@Override
									public Level3DashboardService requestLevel3DashboardService() {
										return this.level3DashboardService;
									}
									 @Override
									public Level2MeetingService requestBookingMeetingRoomService() {
										return this.bookingMeetingRoomService;
									}
									@Override
									public AssetService requestAssetService() {
										return this.assetService;
									}
									@Override
									public FieldService requestFieldService() {
										return this.fieldService;
									}
									@Override
									public ImageService requestImageService() {
										return this.imageService;
									}
									@Override
									public M99DailyReportService requestM99DailyReportService() {
										return this.m99DailyReportService;
									}
									@Override
									public M00Codes030Service requestM00Codes030Service(){
										return this.m00Codes030Service;
									}
									@Override
									public M00TaskService requestM00TaskService() {
										return this.m00TaskService;
									}
									@Override
									public M00EmployeeService requestM00EmployeeService() {
										return this.m00EmployeeService;
									}
									@Override
									public Pme00EmployeeMeetingService requestPme00EmployeeMeetingService() {
										return this.pme00EmployeeMeetingService;
									}
									@Override
									public Pme00MeetingService requestPme00MeetingService() {
										return this.pme00MeetingService;
									}
									@Override
									public Pme00MemberService requestPme00MemberService() {
										return this.pme00MemberService;
									}
									@Override
									public Pme00ProjectInfoService requestPme00ProjectInfoService() {
										return this.pme00ProjectInfoService;
									}
									@Override
									public Pme00EmployeeTaskService requestPme00EmployeeTaskService() {
										return this.pme00EmployeeTaskService;
									}
									@Override
									public Pme00AnnouncementService requestPme00AnnouncementService() { return this.pme00AnnouncementService; }
									@Override
									public Pme00DashboardSettingService requestPme00DashboardSettingService() {
										return this.pme00DashboardSettingService;
									}
									@Override
									public M00Codes020Service requestM00Codes020Service(){return this.m00Codes020Service;}
									@Override
									public Level2TaskService requestLevel2TaskService() {
										return this.level2TaskService;
									}
									@Override
									public Pme00RoleService requestPme00RoleService() {
										return this.pme00RoleService;
									}
									@Override
									public Pme00RoleUserService requestPme00RoleUserService() {
										return this.pme00RoleUserService;
									}
									@Override
									public Pme00PasswordTokenService requestPasswordService() {
										return this.pme00PasswordTokenService;
									}
									@Override
									public Pme00PermissionService requestPme00PermissionService() {
										return this.pme00PermissionService;
									}
									@Override
									public Pme00PerRoleService requestPme00PerRoleService() {
										return this.pme00PerRoleService;
									}
									@Override
									public LogoutAccessTokenService requestLogoutAccessTokenService() {
										return this.logoutAccessTokenService;
									}
									@Override
									public S91MenuService requestS91MenuService() {
										return this.s91MenuService;
									}
									@Override
									public Pme00WorkingTimeService requestPme00WorkingTimeService() {
										return this.pme00WorkingTimeService;
									}
									@Override
									public Level2WorkingTimeService requestLevel2WorkingTimeService() {
										return this.level2WorkingTimeService;
									}
									@Override
									public Cms06MenuService requestCms06MenuService() {
										return cms06MenuService;
									}
									@Override
									public Cms06MediaService requestCms06MediaService() {
										return cms06MediaService;
									}
									@Override
									public Cms06PostService requestCms06PostService() {
										return cms06PostService;
									}
									@Override
									public Cms06LanguageService requestCms06LanguageService() {
										return cms06LanguageService;
									}
									@Override
									public Cms06LanguageContentService requestCms06LanguageContentService() {
										return cms06LanguageContentService;
									}
									@Override
									public Cms06TagsService requestCms06TagsService() {
										return cms06TagsService;
									}
									@Override
									public Cms06ContentTagsService requestCms06ContentTagsService() {
										return cms06ContentTagsService;
									}
									@Override
									public Level2QrCodeService requestLevel2QrCodeService() {
										return this.level2QrCodeService;
									}
									@Override
									public Level2EmployeeService requestLevel2EmployeeService() {
										return this.level2EmployeeService;
									}
									@Override
									public Pme00IssueManagementService requestPme00IssueManagementService(){
										return  this.pme00IssueManagementService;
									}
									@Override
									public Pme00NotificationService requestPme00NotificationService() {
										return this.pme00NotificationService;
									}
									@Override
									public Pme00NotificationGroupService requestPme00NotificationGroupService() {
										return this.pme00NotificationGroupService;
									}
									@Override
									public Pme00NotificationMemberService requestPme00NotificationMemberService() {
										return this.pme00NotificationMemberService;
									}
									@Override
									public M00StandardDocumentService requestM00StandardDocumentService() {
										return this.m00StandardDocumentService;
									}
								}
		Domain-Logic:
								package com.poscdx.odc.ampro015.domain.logic;
								import com.poscdx.odc.ampro015.domain.entity.*;
								import com.poscdx.odc.ampro015.domain.lifecycle.ServiceLifecycle;
								import com.poscdx.odc.ampro015.domain.spec.Level2ProjectService;
								import com.poscdx.odc.ampro015.domain.utils.Utils;
								import org.springframework.data.domain.PageRequest;
								import org.springframework.data.domain.Pageable;
								import org.springframework.data.domain.Sort;
								import org.springframework.transaction.annotation.Transactional;
								import org.springframework.web.multipart.MultipartFile;
								import java.sql.SQLException;
								import java.util.*;
								public class Level2ProjectLogic implements Level2ProjectService {
									@Override
									@Transactional(rollbackFor = { SQLException.class })
									public List<Object> registerProject(ServiceLifecycle serviceLifecycle, ProjectManagementDto dto,
																   MultipartFile imageUpload, MultipartFile fileUpload) throws SQLException {
										List<Object> resultList = new ArrayList<>();
										if (dto != null) {
											// Check project code exists
											if(checkExistsM00Codes030(serviceLifecycle, Utils.CD_TP_ID, Utils.CATEGORY_GROUP_ID, dto.getM00Codes030().getCdV())
													&& checkExistsPme00ProjectInfo(serviceLifecycle, dto.getPme00ProjectInfo().getCdV())){
												resultList.add(false);
												resultList.add("Project already exists!");
												return resultList;
											}
											// Insert data M00Codes030
											M00Codes030 entityCodes030 = new M00Codes030();
											int seq = serviceLifecycle.requestM00Codes030Service().getMaxSeqInquiry(Utils.CD_TP_ID, Utils.CATEGORY_GROUP_ID) + 1;
											entityCodes030.setCdTpId(Utils.CD_TP_ID);
											entityCodes030.setCategoryGroupId(Utils.CATEGORY_GROUP_ID);
											entityCodes030.setCdV(dto.getM00Codes030().getCdV());
											entityCodes030.setCdvMeaning(dto.getM00Codes030().getCdvMeaning());
											entityCodes030.setCdVExplain(dto.getM00Codes030().getCdVExplain());
											entityCodes030.setCdVInquirySeq(seq);
											entityCodes030.setCreatedProgramId(dto.getM00Codes030().getCreatedProgramId());
											entityCodes030.setCreationTimestamp(dto.getM00Codes030().getCreationTimestamp());
											entityCodes030.setLastUpdateProgramId(dto.getM00Codes030().getLastUpdateProgramId());
											entityCodes030.setLastUpdateTimestamp(dto.getM00Codes030().getLastUpdateTimestamp());
											serviceLifecycle.requestM00Codes030Service().register(entityCodes030);
											// Insert data Pme00ProjectInfo
											Pme00ProjectInfo entityInfo = new Pme00ProjectInfo();
											entityInfo.setCdV(dto.getPme00ProjectInfo().getCdV());
											entityInfo.setPeriod(dto.getPme00ProjectInfo().getPeriod());
											entityInfo.setStartDate(dto.getPme00ProjectInfo().getStartDate());
											entityInfo.setEndDate(dto.getPme00ProjectInfo().getEndDate());
											entityInfo.setKoreaPm(dto.getPme00ProjectInfo().getKoreaPm());
											entityInfo.setVietnamPl(dto.getPme00ProjectInfo().getVietnamPl());
											entityInfo.setStatus(dto.getPme00ProjectInfo().getStatus());
											entityInfo.setFramework(dto.getPme00ProjectInfo().getFramework());
											entityInfo.setImage(dto.getPme00ProjectInfo().getImage());
											entityInfo.setFile(dto.getPme00ProjectInfo().getFile());
											serviceLifecycle.requestPme00ProjectInfoService().register(entityInfo);
											// Insert data Pme00Member
											Pme00Member entityMember;
											for (Pme00Member member : dto.getLstMember()) {
												entityMember = new Pme00Member();
												entityMember.setCdVId(dto.getM00Codes030().getCdV());
												entityMember.setEmpId(member.getEmpId());
												entityMember.setEmpName(member.getEmpName());
												entityMember.setAvatar(member.getAvatar());
												serviceLifecycle.requestPme00MemberService().register(entityMember);
											}
										}
										// insert file/image
										if (imageUpload != null) {
											String result = serviceLifecycle.requestLevel2Service().uploadFile(Utils.UPLOAD_BUCKET, "Project", imageUpload);
											if (!result.contains("Project")) {
												resultList.add(false);
												resultList.add("Project created. However, image could not be saved.");
												return resultList;
											}
										}
										if (fileUpload != null) {
											String result = serviceLifecycle.requestLevel2Service().uploadFile(Utils.UPLOAD_BUCKET, "Project", fileUpload);
											if (!result.contains("Project")) {
												resultList.add(false);
												resultList.add("Project created. However, file could not be saved.");
												return resultList;
											}
										}
										resultList.add(true);
										return resultList;
									}
									@Override
									@Transactional(rollbackFor = { SQLException.class })
									public List<Object> modifyProject(ServiceLifecycle serviceLifecycle, ProjectManagementDto dto,
																 MultipartFile imageUpload, MultipartFile fileUpload) throws SQLException {
										List<Object> resultList = new ArrayList<>();
										// Check project code exists
										if(!checkExistsM00Codes030(serviceLifecycle, Utils.CD_TP_ID, Utils.CATEGORY_GROUP_ID, dto.getM00Codes030().getCdV())
												|| !checkExistsPme00ProjectInfo(serviceLifecycle, dto.getPme00ProjectInfo().getCdV())){
											resultList.add(false);
											resultList.add("Project already exists!");
											return resultList;
										}
										//  Delete old file/image
										String imageNew = dto.getPme00ProjectInfo().getImage();
										String fileNew = dto.getPme00ProjectInfo().getFile();
										if (imageUpload != null || fileUpload != null || imageNew.isEmpty() || fileNew.isEmpty()) {
											Pme00ProjectInfo projectInfo = serviceLifecycle.requestPme00ProjectInfoService().find(dto.getM00Codes030().getCdV());
											List<String> fileName = new ArrayList<>();
											if (imageUpload != null || imageNew.isEmpty()) {
												String imageString = projectInfo.getImage();
												if (imageString != null) {
													imageString = imageString.substring(imageString.lastIndexOf("/") + 1);
													fileName.add(imageString);
												}
											}
											if (fileUpload != null || fileNew.isEmpty()) {
												String fileString = projectInfo.getFile();
												if (fileString != null) {
													fileString = fileString.substring(fileString.lastIndexOf("/") + 1);
													fileName.add(fileString);
												}
											}
											boolean result = serviceLifecycle.requestLevel2Service()
													.removeFile(Utils.UPLOAD_BUCKET, "Project", fileName);
											if (!result) {
												resultList.add(false);
												resultList.add("Project updated. However, file(s) could not be saved.");
												return resultList;
											}
										}
										// Update data M00Codes030
										List<M00Codes030> lstCodes030 = new ArrayList<>();
										M00Codes030 entityCodes030 = new M00Codes030();
										entityCodes030.setCdTpId(Utils.CD_TP_ID);
										entityCodes030.setCategoryGroupId(Utils.CATEGORY_GROUP_ID);
										entityCodes030.setCdV(dto.getM00Codes030().getCdV());
										entityCodes030.setCdvMeaning(dto.getM00Codes030().getCdvMeaning());
										entityCodes030.setCdVExplain(dto.getM00Codes030().getCdVExplain());
										entityCodes030.setCdVInquirySeq(dto.getM00Codes030().getCdVInquirySeq());
										entityCodes030.setCreatedProgramId(dto.getM00Codes030().getCreatedProgramId());
										entityCodes030.setCreationTimestamp(dto.getM00Codes030().getCreationTimestamp());
										entityCodes030.setLastUpdateProgramId(dto.getM00Codes030().getLastUpdateProgramId());
										entityCodes030.setLastUpdateTimestamp(dto.getM00Codes030().getLastUpdateTimestamp());
										lstCodes030.add(entityCodes030);
										serviceLifecycle.requestM00Codes030Service().modify(lstCodes030);
										// Update data Pme00ProjectInfo
										List<Pme00ProjectInfo> lstProjectInfo = new ArrayList<>();
										Pme00ProjectInfo entityInfo = new Pme00ProjectInfo();
										entityInfo.setCdV(dto.getPme00ProjectInfo().getCdV());
										entityInfo.setPeriod(dto.getPme00ProjectInfo().getPeriod());
										entityInfo.setStartDate(dto.getPme00ProjectInfo().getStartDate());
										entityInfo.setEndDate(dto.getPme00ProjectInfo().getEndDate());
										entityInfo.setKoreaPm(dto.getPme00ProjectInfo().getKoreaPm());
										entityInfo.setVietnamPl(dto.getPme00ProjectInfo().getVietnamPl());
										entityInfo.setStatus(dto.getPme00ProjectInfo().getStatus());
										entityInfo.setFramework(dto.getPme00ProjectInfo().getFramework());
										entityInfo.setImage(dto.getPme00ProjectInfo().getImage());
										entityInfo.setFile(dto.getPme00ProjectInfo().getFile());
										lstProjectInfo.add(entityInfo);
										serviceLifecycle.requestPme00ProjectInfoService().modify(lstProjectInfo);
										// Update data Pme00Member
										// Delete old Pme00Member
										serviceLifecycle.requestPme00MemberService().deleteMemberById(dto.getPme00ProjectInfo().getCdV(), null);
										// Insert new Pme00Member
										Pme00Member entityMember;
										for (Pme00Member member : dto.getLstMember()) {
											entityMember = new Pme00Member();
											entityMember.setCdVId(dto.getM00Codes030().getCdV());
											entityMember.setEmpId(member.getEmpId());
											entityMember.setEmpName(member.getEmpName());
											entityMember.setAvatar(member.getAvatar());
											serviceLifecycle.requestPme00MemberService().register(entityMember);
										}
										if (imageUpload != null) {
											String result = serviceLifecycle.requestLevel2Service().uploadFile(Utils.UPLOAD_BUCKET, "Project", imageUpload);
											if (!result.contains("Project")) {
												resultList.add(false);
												resultList.add("Project created. However, image could not be saved.");
												return resultList;
											}
										}
										if (fileUpload != null) {
											String result = serviceLifecycle.requestLevel2Service().uploadFile(Utils.UPLOAD_BUCKET, "Project", fileUpload);
											if (!result.contains("Project")) {
												resultList.add(false);
												resultList.add("Project created. However, file could not be saved.");
												return resultList;
											}
										}
										resultList.add(true);
										return resultList;
									}
									@Override
									@Transactional(rollbackFor = { SQLException.class })
									public List<Object> deleteProject(ServiceLifecycle serviceLifecycle, M00Codes030Id id) throws SQLException {
										List<Object> resultList = new ArrayList<>();
										// Check project code exists
										if(checkExistsM00Codes030(serviceLifecycle, Utils.CD_TP_ID, Utils.CATEGORY_GROUP_ID, id.getCdV())
												 && checkExistsPme00ProjectInfo(serviceLifecycle, id.getCdV())){
											// Delete tasks
											List<M00Task> m00TaskDtoList = serviceLifecycle.requestM00TaskService().findAll(id.getCdV());
											Map<String, Object> requestDeleteTaskId = new HashMap<>();
											requestDeleteTaskId.put("projectNumber", id.getCdV());
											for(M00Task task : m00TaskDtoList) {
												requestDeleteTaskId.put("taskName", task.getTaskName());
												requestDeleteTaskId.put("empId", "");
												requestDeleteTaskId.put("password", "");
												serviceLifecycle.requestLevel2TaskService().remove(serviceLifecycle, requestDeleteTaskId, false);
											}
											// Delete member in Pme00Member
											serviceLifecycle.requestPme00MemberService().deleteMemberById(id.getCdV(), null);
											//  Delete old file/image
											Pme00ProjectInfo projectInfo = serviceLifecycle.requestPme00ProjectInfoService().find(id.getCdV());
											List<String> fileName = new ArrayList<>();
											String imageString = projectInfo.getImage();
											imageString = imageString.substring(imageString.lastIndexOf("/") + 1);
											fileName.add(imageString);
											String fileString = projectInfo.getFile();
											fileString = fileString.substring(fileString.lastIndexOf("/") + 1);
											fileName.add(fileString);
											boolean result = serviceLifecycle.requestLevel2Service()
													.removeFile(Utils.UPLOAD_BUCKET, "Project", fileName);
											if (!result) {
												resultList.add(false);
												resultList.add("Error occurred while attempting to delete file(s) from server.");
												return resultList;
											}
											// Delete project Pme00ProjectInfo
											serviceLifecycle.requestPme00ProjectInfoService().remove(id.getCdV());
											// Delete project M00Codes030
											id.setCdTpId(Utils.CD_TP_ID);
											id.setCategoryGroupId(Utils.CATEGORY_GROUP_ID);
											serviceLifecycle.requestM00Codes030Service().remove(id);
											resultList.add(true);
											return resultList;
										}
										resultList.add(false);
										resultList.add("Error occurred while attempting to delete project.");
										return resultList;
									}
									@Override
									public Map<String, Object> getProjectList(ServiceLifecycle serviceLifecycle, ProjectManagementDto dto, int pageNo, int pageSize) {
										List<ProjectManagementDto>  projectList = new ArrayList<>();
										List<M00Codes030> m00Codes030List =
												serviceLifecycle.requestM00Codes030Service()
														.findM00Codes030(dto.getM00Codes030().getCdV(), dto.getM00Codes030().getCdvMeaning());
										Pageable pageable;
										if(pageSize == 0){
											pageable = Pageable.unpaged();
										} else {
											pageable = PageRequest.of(pageNo, pageSize);
										}
										List<Pme00ProjectInfo> pme00ProjectInfoList =
												serviceLifecycle.requestPme00ProjectInfoService()
														.findProjectInfo(dto.getM00Codes030().getCdV(),  dto.getM00Codes030().getCdvMeaning()
																, dto.getPme00ProjectInfo().getPeriod(), dto.getPme00ProjectInfo().getKoreaPm()
																, dto.getPme00ProjectInfo().getVietnamPl(), dto.getPme00ProjectInfo().getFramework()
																, dto.getPme00ProjectInfo().getSearchStatus(), dto.getFromStartDate(), dto.getToStartDate()
																, dto.getFromEndDate(), dto.getToEndDate(), pageable);
										for (M00Codes030 project : m00Codes030List) {
											for (Pme00ProjectInfo projectInfo : pme00ProjectInfoList) {
												ProjectManagementDto rsDto = new ProjectManagementDto();
												if (project.getCdV().equals(projectInfo.getCdV())){
													rsDto.setM00Codes030(project);
													rsDto.setPme00ProjectInfo(projectInfo);
													List<Pme00Member> lstMember = new ArrayList<>();
													lstMember = serviceLifecycle.requestPme00MemberService().getListMemberByCdVId(project.getCdV());
													rsDto.setLstMember(lstMember);
													projectList.add(rsDto);
												}
											}
										}
										int total = serviceLifecycle.requestPme00ProjectInfoService().getCountProject(dto.getM00Codes030().getCdV()
												, dto.getM00Codes030().getCdvMeaning(), dto.getPme00ProjectInfo().getPeriod()
												, dto.getPme00ProjectInfo().getKoreaPm(), dto.getPme00ProjectInfo().getVietnamPl()
												, dto.getPme00ProjectInfo().getFramework(), dto.getPme00ProjectInfo().getSearchStatus()
												, dto.getFromStartDate(), dto.getToStartDate(), dto.getFromEndDate(), dto.getToEndDate());
										Map<String, Object> rs = new HashMap<>();
										rs.put("total", total);
										rs.put("info", projectList);
										return rs;
									}
									@Override
									public Map<String, Object> getProjectListWithTask(ServiceLifecycle serviceLifecycle, ProjectManagementDto dto, String empId, int pageNo, int pageSize) {
										List<ProjectManagementDto>  projectList = new ArrayList<>();
										Pageable pageable;
										if(pageSize == 0){
											pageable = Pageable.unpaged();
										} else {
											pageable = PageRequest.of(pageNo, pageSize, Sort.by("status"));
										}
										List<Pme00ProjectInfo> pme00ProjectInfoList =
												serviceLifecycle.requestPme00ProjectInfoService()
														.findProjectInfoWithEmpId(dto.getM00Codes030().getCdV(),  dto.getM00Codes030().getCdvMeaning()
																, dto.getPme00ProjectInfo().getPeriod(), dto.getPme00ProjectInfo().getKoreaPm()
																, dto.getPme00ProjectInfo().getVietnamPl(), dto.getPme00ProjectInfo().getFramework()
																, dto.getPme00ProjectInfo().getSearchStatus()
																, dto.getFromStartDate(), dto.getToStartDate()
																, dto.getFromEndDate(), dto.getToEndDate(), empId, pageable);
										for (Pme00ProjectInfo projectInfo : pme00ProjectInfoList) {
											List<M00TaskDto> taskList = new ArrayList<>();
											try {
												HashMap<String, Object> mapTaskResponse = (HashMap<String, Object>) serviceLifecycle.requestLevel2TaskService().findTaskByConditions(serviceLifecycle,
														projectInfo.getCdV(), null, null, null, null, null, null,
														0, 20, "lastUpdateTimestamp", "ASC").getBody();
												if (!mapTaskResponse.isEmpty()) {
													taskList = (List<M00TaskDto>) mapTaskResponse.get("data");
												}
											} catch (Exception e) {
												System.out.println("TASK: " + e.getMessage());
											}
											ProjectManagementDto rsDto = new ProjectManagementDto();
											rsDto.setPme00ProjectInfo(projectInfo);
											//Set project name
											M00Codes030Id m00Codes030Id = new M00Codes030Id(Utils.CD_TP_ID, Utils.CATEGORY_GROUP_ID, projectInfo.getCdV());
											String projectName = serviceLifecycle.requestM00Codes030Service().find(m00Codes030Id).getCdvMeaning();
											String projectCode = serviceLifecycle.requestM00Codes030Service().find(m00Codes030Id).getCdV();
											String projectDescription = serviceLifecycle.requestM00Codes030Service().find(m00Codes030Id).getCdVExplain();
											String creatorId = serviceLifecycle.requestM00Codes030Service().find(m00Codes030Id).getCreatedProgramId();
											M00Codes030 m00Codes030 = new M00Codes030();
											m00Codes030.setCdvMeaning(projectName);
											m00Codes030.setCdV(projectCode);
											m00Codes030.setCreatedProgramId(creatorId);
											m00Codes030.setCdVExplain(projectDescription);
											rsDto.setM00Codes030(m00Codes030);
											//Set project progress
											long completedTasks = taskList.stream()
													.filter(item -> "O".equals(item.getTask().getStatus()))
													.count();
											double completionPercentage = (completedTasks * 100.0) / taskList.size();
											int progress = (int) completionPercentage;
											rsDto.setProgress(progress);
											rsDto.setLstTask(taskList);

											List<Pme00Member> lstMember = new ArrayList<>();
											lstMember = serviceLifecycle.requestPme00MemberService().getListMemberByCdVId(projectInfo.getCdV());
											rsDto.setLstMember(lstMember);
											projectList.add(rsDto);
										}
										int total = serviceLifecycle.requestPme00ProjectInfoService().getCountProjectWithEmpId(dto.getM00Codes030().getCdV()
												, dto.getM00Codes030().getCdvMeaning(), dto.getPme00ProjectInfo().getPeriod()
												, dto.getPme00ProjectInfo().getKoreaPm(), dto.getPme00ProjectInfo().getVietnamPl()
												, dto.getPme00ProjectInfo().getFramework(), dto.getPme00ProjectInfo().getSearchStatus()
												, dto.getFromStartDate(), dto.getToStartDate(), dto.getFromEndDate(), dto.getToEndDate(), empId);
										Map<String, Object> rs = new HashMap<>();
										rs.put("total", total);
										rs.put("info", projectList);
										return rs;
									}
									@Override
									public Map<String, Object> getAllProjectListWithEmpId(ServiceLifecycle serviceLifecycle, String empId, int pageNo, int pageSize) {
										List<ProjectManagementDto> result = new ArrayList<>();
										//Get project list
										Pageable pageable;
										if(pageSize == 0){
											pageable = Pageable.unpaged();
										} else {
											pageable = PageRequest.of(pageNo, pageSize, Sort.by("status"));
										}
										List<Pme00ProjectInfo> projectList = serviceLifecycle.requestPme00ProjectInfoService().findProjectInfoWithEmpId(
												null, null, 0, null, null, null, null,
												null, null, null, null, empId, pageable);
										if (!projectList.isEmpty()) {
											for (Pme00ProjectInfo pme00ProjectInfo : projectList) {
												ProjectManagementDto newObject = new ProjectManagementDto();
												//Set project info
												newObject.setPme00ProjectInfo(pme00ProjectInfo);
												//Get task list
												List<M00TaskDto> taskList = new ArrayList<>();
												try {
													HashMap<String, Object> mapTaskResponse = (HashMap<String, Object>) serviceLifecycle.requestLevel2TaskService().findTaskByConditions(serviceLifecycle,
															pme00ProjectInfo.getCdV(), null, null, null, null, null, null,
															0, 20, "lastUpdateTimestamp", "ASC").getBody();
													if (!mapTaskResponse.isEmpty()) {
														taskList = (List<M00TaskDto>) mapTaskResponse.get("data");
													}
												} catch (Exception e) {
													System.out.println("TASK: " + e.getMessage());
												}
												newObject.setLstTask(taskList);
												//Set member list
												List<Pme00Member> listMember = serviceLifecycle.requestPme00MemberService().getListMemberByCdVId(pme00ProjectInfo.getCdV());
												newObject.setLstMember(listMember);
												//Set project name
												M00Codes030Id m00Codes030Id = new M00Codes030Id(Utils.CD_TP_ID, Utils.CATEGORY_GROUP_ID, pme00ProjectInfo.getCdV());
												String projectName = serviceLifecycle.requestM00Codes030Service().find(m00Codes030Id).getCdvMeaning();
												String creatorId = serviceLifecycle.requestM00Codes030Service().find(m00Codes030Id).getCreatedProgramId();
												M00Codes030 m00Codes030 = new M00Codes030();
												m00Codes030.setCdvMeaning(projectName);
												m00Codes030.setCreatedProgramId(creatorId);
												newObject.setM00Codes030(m00Codes030);
												//Set project progress
												long completedTasks = taskList.stream()
														.filter(item -> "O".equals(item.getTask().getStatus()))
														.count();
												double completionPercentage = (completedTasks * 100.0) / taskList.size();
												int progress = (int) completionPercentage;
												newObject.setProgress(progress);
												System.out.println("Completion Percentage: " + completionPercentage);
												result.add(newObject);
											}
										}
										int total = serviceLifecycle.requestPme00ProjectInfoService().getCountProjectWithEmpId(null, null,0, null,
												null, null,  null, null, null, null, null, empId);
										Map<String, Object> rs = new HashMap<>();
										rs.put("total", total);
										rs.put("info", result);
										return rs;
									}
									@Override
									public List<M00Employee> getProjectMember(ServiceLifecycle serviceLifecycle, String cdV) {
										return serviceLifecycle.requestPme00ProjectInfoService().getProjectMember(cdV);
									}
									@Override
									public ProjectManagementDto findProjectById(ServiceLifecycle serviceLifecycle, M00Codes030Id id) {
										ProjectManagementDto dto = new ProjectManagementDto();
										dto.setM00Codes030(serviceLifecycle.requestM00Codes030Service().find(id));
										dto.setPme00ProjectInfo(serviceLifecycle.requestPme00ProjectInfoService().find(id.getCdV()));
										return dto;
									}
									private boolean checkExistsM00Codes030(ServiceLifecycle serviceLifecycle, int cdTpId, int cateGroupId, String cdV){
										M00Codes030Id codes030Id = new M00Codes030Id();
										codes030Id.setCdTpId(cdTpId);
										codes030Id.setCategoryGroupId(cateGroupId);
										codes030Id.setCdV(cdV);
										M00Codes030 codes030 = serviceLifecycle.requestM00Codes030Service().find(codes030Id);
										return codes030 != null;
									}
									private boolean checkExistsPme00ProjectInfo(ServiceLifecycle serviceLifecycle, String cdV){
										Pme00ProjectInfo projectInfo = new Pme00ProjectInfo();

										projectInfo = serviceLifecycle.requestPme00ProjectInfoService().find(cdV);

										return projectInfo != null;
									}
								}
		Store:
								package com.poscodx.odc.ampro015.store;
								import com.poscdx.odc.ampro015.domain.entity.Pme00ProjectInfo;
								import com.poscdx.odc.ampro015.domain.store.Pme00ProjectInfoStore;
								import com.poscodx.odc.ampro015.store.jpo.Pme00ProjectInfoJpo;
								import com.poscodx.odc.ampro015.store.repository.Pme00ProjectInfoRepository;
								import org.springframework.data.domain.Pageable;
								import org.springframework.stereotype.Repository;
								import java.util.Date;
								import java.util.List;
								import java.util.Optional;
								import java.util.Set;
								@Repository
								public class Pme00ProjectInfoJpaStore implements Pme00ProjectInfoStore {
									private final Pme00ProjectInfoRepository repository;
									public Pme00ProjectInfoJpaStore(Pme00ProjectInfoRepository repository) {
										this.repository = repository;
									}
									@Override
									public Pme00ProjectInfo retrieve(String cdVId) {
										Optional<Pme00ProjectInfoJpo> retVal = this.repository.findById(cdVId);
										return retVal.map(Pme00ProjectInfoJpo::toDomain).orElse(null);
									}
									@Override
									public List<Pme00ProjectInfo> retrieveAll() {
										return Pme00ProjectInfoJpo.toDomains(this.repository.findAll());
									}
									@Override
									public Pme00ProjectInfo update(Pme00ProjectInfo Pme00ProjectInfo) {
										Pme00ProjectInfoJpo jpoToUpdate = new Pme00ProjectInfoJpo(Pme00ProjectInfo);
										Pme00ProjectInfoJpo updatedJpo = this.repository.save(jpoToUpdate);
										return updatedJpo.toDomain();
									}
									@Override
									public Pme00ProjectInfo create(Pme00ProjectInfo entity) {
										return this.repository.save(new Pme00ProjectInfoJpo(entity)).toDomain();
									}
									@Override
									public void delete(String cdVId) {
										this.repository.deleteById(cdVId);
									}
									@Override
									public List<Object[]> findProjectInfo(boolean cdVAll, List<String> cdV, String meaning, int period, String koreaPM, String vietnamPL, String framework, boolean searchAllStatus,
																		  List<String> searchStatus, Date fromStartDate, Date toStartDate, Date fromEndDate, Date toEndDate, Pageable pageable){
										return this.repository.findProjectInfo(cdVAll, cdV, meaning, period, koreaPM, vietnamPL, framework, searchAllStatus,
												searchStatus, fromStartDate, toStartDate, fromEndDate, toEndDate, pageable);
									}
									@Override
									public List<Object[]> findProjectInfoWithEmpId(boolean cdVAll, List<String> cdV, String meaning, int period, String koreaPM, String vietnamPL, String framework, boolean searchAllStatus,
																				   List<String> searchStatus, Date fromStartDate, Date toStartDate, Date fromEndDate, Date toEndDate, String empId,
																				   Pageable pageable) {
										return this.repository.findProjectInfoWithEmpId(cdVAll, cdV, meaning, period, koreaPM, vietnamPL, framework, searchAllStatus,
												searchStatus, fromStartDate, toStartDate, fromEndDate, toEndDate, empId, pageable);
									}
									@Override
									public List<Object[]> getKoreaPM(String projectNumber) {
										return this.repository.getKoreaPM(projectNumber);
									}
									@Override
									public List<Object[]> getVietnamPL(String projectNumber) {
										return this.repository.getVietnamPL(projectNumber);
									}
									@Override
									public List<Object[]> getProjectMember(String cdV) {
										return this.repository.getMember(cdV);
									}
									@Override
									public int getCountProject(boolean cdVAll, List<String> cdV, String meaning, int period, String koreaPM, String vietnamPL, String framework, boolean searchAllStatus,
															   List<String> searchStatus, Date fromStartDate, Date toStartDate, Date fromEndDate, Date toEndDate){
										return this.repository.countProject(cdVAll, cdV, meaning, period, koreaPM, vietnamPL, framework, searchAllStatus,
																			searchStatus, fromStartDate, toStartDate, fromEndDate, toEndDate);
									}
									@Override
									public int getCountProjectWithEmpId(boolean cdVAll, List<String> cdV, String meaning, int period, String koreaPM, String vietnamPL, String framework, boolean searchAllStatus,
																		List<String> searchStatus, Date fromStartDate, Date toStartDate, Date fromEndDate, Date toEndDate, String empId) {
										return this.repository.countProjectWithEmpId(cdVAll, cdV, meaning, period, koreaPM, vietnamPL, framework, searchAllStatus,
												searchStatus, fromStartDate, toStartDate, fromEndDate, toEndDate, empId);
									}
									@Override
									public List<Object[]> getKoreaPMBySet(Set<String> projectNumber) {
										return this.repository.getKoreaPMBySet(projectNumber);
									}
									@Override
									public List<Object[]> getVietnamPLBySet(Set<String> projectNumber) {
										return this.repository.getVietnamPLBySet(projectNumber);
									}
								}
		Store-Repository:
								package com.poscodx.odc.ampro015.store.repository;
								import com.poscodx.odc.ampro015.store.jpo.Pme00ProjectInfoJpo;
								import org.springframework.data.domain.Pageable;
								import org.springframework.data.jpa.repository.JpaRepository;
								import org.springframework.data.jpa.repository.Query;
								import org.springframework.data.repository.query.Param;
								import java.util.Date;
								import java.util.List;
								import java.util.Set;
								public interface Pme00ProjectInfoRepository extends JpaRepository<Pme00ProjectInfoJpo, String> {
									@Query(value =
											"SELECT INFO.*\n" +
												", EMP1.NAME AS KOREA_PM_NAME\n" +
												", EMP1.PHOTO AS KOREA_PM_PHOTO\n" +
												", EMP2.NAME AS VIETNAM_PL_NAME\n" +
												", EMP2.PHOTO AS VIETNAM_PL_PHOTO\n" +
											"FROM \n" +
												"TB_PME00_PROJECT_INFO INFO\n" +
											"JOIN TB_M00_EMPLOYEE EMP1\n" +
												"ON EMP1.EMP_ID = INFO.KOREA_PM \n" +
											"JOIN TB_M00_EMPLOYEE EMP2\n" +
												"ON EMP2.EMP_ID = INFO.VIETNAM_PL \n" +
											"JOIN TB_M00_CODES030 CODE030\n" +
												"ON CODE030.CD_V = INFO.CD_V \n" +
											"WHERE  1 = 1 \n" +
												"AND (:cdVAll = TRUE OR INFO.CD_V IN (:cdV))\n" +
												"AND (:meaning IS NULL OR (CODE030.CD_V_MEANING LIKE CONCAT('%', :meaning, '%')))\n" +
												"AND (:period IS NULL OR :period = 0 OR (INFO.PERIOD = :period))\n" +
												"AND (:koreaPM IS NULL OR ( INFO.KOREA_PM LIKE CONCAT('%', :koreaPM, '%')))\n" +
												"AND (:vietnamPL IS NULL OR (INFO.VIETNAM_PL LIKE CONCAT('%', :vietnamPL, '%')))\n" +
												"AND (:framework IS NULL OR (INFO.FRAMEWORK LIKE CONCAT('%', :framework, '%')))\n" +
												"AND (:searchAllStatus = TRUE OR INFO.STATUS IN (:searchStatus))\n" +
												"AND ((:fromStartDate IS NULL AND :toStartDate IS NULL) OR (INFO.START_DATE BETWEEN :fromStartDate AND :toStartDate))\n" +
												"AND ((:fromEndDate IS NULL AND :toEndDate IS NULL) OR (INFO.END_DATE BETWEEN :fromEndDate AND :toEndDate))"
											, nativeQuery = true)
									List<Object[]> findProjectInfo(@Param("cdVAll") boolean cdVAll, @Param("cdV") List<String>  cdV, @Param("meaning") String meaning, @Param("period") int period,
																			  @Param("koreaPM") String koreaPM,  @Param("vietnamPL") String vietnamPL,
																			  @Param("framework") String framework, @Param("searchAllStatus") boolean searchAllStatus,
																			  @Param("searchStatus") List<String> searchStatus, @Param("fromStartDate") Date fromStartDate,
																			  @Param("toStartDate") Date toStartDate, @Param("fromEndDate") Date fromEndDate,
																			  @Param("toEndDate") Date toEndDate, Pageable pageable);
									@Query(value =
											"SELECT DISTINCT INFO.*\n" +
												", EMP1.NAME AS KOREA_PM_NAME\n" +
												", EMP1.PHOTO AS KOREA_PM_PHOTO\n" +
												", EMP2.NAME AS VIETNAM_PL_NAME\n" +
												", EMP2.PHOTO AS VIETNAM_PL_PHOTO\n" +
											"FROM \n" +
												"TB_PME00_PROJECT_INFO INFO\n" +
												"JOIN TB_M00_EMPLOYEE EMP1\n" +
													"ON EMP1.EMP_ID = INFO.KOREA_PM \n" +
												"JOIN TB_M00_EMPLOYEE EMP2\n" +
													"ON EMP2.EMP_ID = INFO.VIETNAM_PL \n" +
												"JOIN TB_M00_CODES030 CODE030\n" +
													"ON CODE030.CD_V = INFO.CD_V \n" +
												"JOIN TB_PME00_MEMBER MEMBER\n" +
													"ON INFO.CD_V = MEMBER.CD_V_ID \n" +
											"WHERE  1 = 1 \n" +
												"AND (:cdVAll = TRUE OR INFO.CD_V IN (:cdV))\n" +
												"AND (:meaning IS NULL OR (CODE030.CD_V_MEANING LIKE CONCAT('%', :meaning, '%')))\n" +
												"AND (:period IS NULL OR :period = 0 OR (INFO.PERIOD = :period))\n" +
												"AND (:koreaPM IS NULL OR ( INFO.KOREA_PM LIKE CONCAT('%', :koreaPM, '%')))\n" +
												"AND (:vietnamPL IS NULL OR (INFO.VIETNAM_PL LIKE CONCAT('%', :vietnamPL, '%')))\n" +
												"AND (:framework IS NULL OR (INFO.FRAMEWORK LIKE CONCAT('%', :framework, '%')))\n" +
												"AND (:searchAllStatus = TRUE OR INFO.STATUS IN (:searchStatus))\n" +
												"AND ((:fromStartDate IS NULL AND :toStartDate IS NULL) OR (INFO.START_DATE BETWEEN :fromStartDate AND :toStartDate))\n" +
												"AND ((:fromEndDate IS NULL AND :toEndDate IS NULL) OR (INFO.END_DATE BETWEEN :fromEndDate AND :toEndDate))" +
												"AND (:empId IS NULL OR (INFO.KOREA_PM = :empId OR INFO.VIETNAM_PL = :empId OR :empId = MEMBER.EMP_ID OR :empId = CODE030.CREATED_PROGRAM_ID))\n"
											, nativeQuery = true)
									List<Object[]> findProjectInfoWithEmpId(@Param("cdVAll") boolean cdVAll, @Param("cdV") List<String> cdV, @Param("meaning") String meaning, @Param("period") int period,
																   @Param("koreaPM") String koreaPM,  @Param("vietnamPL") String vietnamPL,
																   @Param("framework") String framework, @Param("searchAllStatus") boolean searchAllStatus,
																   @Param("searchStatus") List<String> searchStatus, @Param("fromStartDate") Date fromStartDate,
																   @Param("toStartDate") Date toStartDate, @Param("fromEndDate") Date fromEndDate,
																   @Param("toEndDate") Date toEndDate, @Param("empId") String empId, Pageable pageable);
									@Query(value =
											"SELECT DISTINCT \n" +
												"EMP.EMP_ID \n" +
												", EMP.NAME \n" +
												", EMP.PHOTO \n" +
												", EMP.BIRTH_DATE\n" +
												", EMP.IP_ADDRESS\n" +
											"FROM \n" +
												"TB_PME00_PROJECT_INFO AS INFO\n" +
											"JOIN \n" +
												"TB_M00_EMPLOYEE AS EMP\n" +
											"ON \n" +
												"INFO.KOREA_PM = EMP.EMP_ID\n" +
											"WHERE \n" +
												"(:projectNumber IS NULL OR INFO.CD_V = :projectNumber)", nativeQuery = true)
									List<Object[]> getKoreaPM(@Param("projectNumber") String projectNumber);
									@Query(value =
											"SELECT DISTINCT \n" +
												"EMP.EMP_ID \n" +
												", EMP.NAME \n" +
												", EMP.PHOTO \n" +
												", EMP.BIRTH_DATE\n" +
												", EMP.IP_ADDRESS\n" +
											"FROM \n" +
												"TB_PME00_PROJECT_INFO AS INFO\n" +
											"JOIN \n" +
												"TB_M00_EMPLOYEE AS EMP\n" +
											"ON \n" +
												"INFO.VIETNAM_PL = EMP.EMP_ID\n" +
											"WHERE \n" +
												"(:projectNumber IS NULL OR INFO.CD_V = :projectNumber)", nativeQuery = true)
									List<Object[]> getVietnamPL(@Param("projectNumber") String projectNumber);
									@Query(value =
											"SELECT E.EMP_ID \n" +
													", E.NAME \n" +
													", E.PHOTO \n" +
													", E.BIRTH_DATE\n" +
													", E.IP_ADDRESS\n" +
											"FROM \n" +
													"TB_M00_EMPLOYEE AS E\n" +
											"WHERE E.EMP_ID IN \n" +
												"(SELECT M.EMP_ID \n" +
														"FROM TB_PME00_MEMBER AS M \n" +
														"WHERE M.CD_V_ID = :cdV) \n", nativeQuery = true)
									List<Object[]> getMember(@Param("cdV") String cdV);
									@Query(value =
											"SELECT Count(*)\n" +
											"FROM \n" +
												"TB_PME00_PROJECT_INFO AS INFO\n" +
												"JOIN TB_M00_EMPLOYEE EMP1\n" +
													"ON EMP1.EMP_ID = INFO.KOREA_PM \n" +
												"JOIN TB_M00_EMPLOYEE EMP2\n" +
													"ON EMP2.EMP_ID = INFO.VIETNAM_PL \n" +
												"JOIN TB_M00_CODES030 CODE030\n" +
													"ON CODE030.CD_V = INFO.CD_V \n" +
											"WHERE  1 = 1 \n" +
												"AND (:cdVAll = TRUE OR INFO.CD_V IN (:cdV))\n" +
												"AND (:meaning IS NULL OR (CODE030.CD_V_MEANING LIKE CONCAT('%', :meaning, '%')))\n" +
												"AND (:period IS NULL OR :period = 0 OR (INFO.PERIOD = :period))\n" +
												"AND (:koreaPM IS NULL OR ( INFO.KOREA_PM LIKE CONCAT('%', :koreaPM, '%')))\n" +
												"AND (:vietnamPL IS NULL OR (INFO.VIETNAM_PL LIKE CONCAT('%', :vietnamPL, '%')))\n" +
												"AND (:framework IS NULL OR (INFO.FRAMEWORK LIKE CONCAT('%', :framework, '%')))\n" +
												"AND (:searchAllStatus = TRUE OR INFO.STATUS IN (:searchStatus))\n" +
												"AND ((:fromStartDate IS NULL AND :toStartDate IS NULL) OR (INFO.START_DATE BETWEEN :fromStartDate AND :toStartDate))\n" +
												"AND ((:fromEndDate IS NULL AND :toEndDate IS NULL) OR (INFO.END_DATE BETWEEN :fromEndDate AND :toEndDate))"
											, nativeQuery = true)
									int countProject(@Param("cdVAll") boolean cdVAll, @Param("cdV") List<String> cdV, @Param("meaning") String meaning, @Param("period") int period,
																   @Param("koreaPM") String koreaPM,  @Param("vietnamPL") String vietnamPL,
																   @Param("framework") String framework, @Param("searchAllStatus") boolean searchAllStatus,
																   @Param("searchStatus") List<String> searchStatus, @Param("fromStartDate") Date fromStartDate,
																   @Param("toStartDate") Date toStartDate, @Param("fromEndDate") Date fromEndDate,
																   @Param("toEndDate") Date toEndDate);
									@Query(value =
											"SELECT COUNT(DISTINCT INFO.CD_V)\n" +
											"FROM \n" +
												"TB_PME00_PROJECT_INFO INFO\n" +
												"JOIN TB_M00_EMPLOYEE EMP1\n" +
													"ON EMP1.EMP_ID = INFO.KOREA_PM \n" +
												"JOIN TB_M00_EMPLOYEE EMP2\n" +
													"ON EMP2.EMP_ID = INFO.VIETNAM_PL \n" +
												"JOIN TB_M00_CODES030 CODE030\n" +
													"ON CODE030.CD_V = INFO.CD_V \n" +
												"JOIN TB_PME00_MEMBER MEMBER\n" +
													"ON INFO.CD_V = MEMBER.CD_V_ID \n" +
											"WHERE  1 = 1 \n" +
												 "AND (:cdVAll = TRUE OR INFO.CD_V IN (:cdV))\n" +
												 "AND (:meaning IS NULL OR (CODE030.CD_V_MEANING LIKE CONCAT('%', :meaning, '%')))\n" +
												 "AND (:period IS NULL OR :period = 0 OR (INFO.PERIOD = :period))\n" +
												 "AND (:koreaPM IS NULL OR ( INFO.KOREA_PM LIKE CONCAT('%', :koreaPM, '%')))\n" +
												 "AND (:vietnamPL IS NULL OR (INFO.VIETNAM_PL LIKE CONCAT('%', :vietnamPL, '%')))\n" +
												 "AND (:framework IS NULL OR (INFO.FRAMEWORK LIKE CONCAT('%', :framework, '%')))\n" +
												 "AND (:searchAllStatus = TRUE OR INFO.STATUS IN (:searchStatus))\n" +
												 "AND ((:fromStartDate IS NULL AND :toStartDate IS NULL) OR (INFO.START_DATE BETWEEN :fromStartDate AND :toStartDate))\n" +
												 "AND ((:fromEndDate IS NULL AND :toEndDate IS NULL) OR (INFO.END_DATE BETWEEN :fromEndDate AND :toEndDate))" +
												 "AND (:empId IS NULL OR (INFO.KOREA_PM = :empId OR INFO.VIETNAM_PL = :empId OR :empId = MEMBER.EMP_ID OR :empId = CODE030.CREATED_PROGRAM_ID))\n"
											, nativeQuery = true)
									int countProjectWithEmpId(@Param("cdVAll") boolean cdVAll, @Param("cdV") List<String> cdV, @Param("meaning") String meaning, @Param("period") int period,
													 @Param("koreaPM") String koreaPM,  @Param("vietnamPL") String vietnamPL,
													 @Param("framework") String framework, @Param("searchAllStatus") boolean searchAllStatus,
													 @Param("searchStatus") List<String> searchStatus, @Param("fromStartDate") Date fromStartDate,
													 @Param("toStartDate") Date toStartDate, @Param("fromEndDate") Date fromEndDate,
													 @Param("toEndDate") Date toEndDate, @Param("empId") String empId);
									@Query(value =
											"SELECT DISTINCT \n" +
													"EMP.EMP_ID \n" +
													", EMP.NAME \n" +
													", EMP.PHOTO \n" +
													", EMP.BIRTH_DATE\n" +
													", EMP.IP_ADDRESS\n" +
													"FROM \n" +
													"TB_PME00_PROJECT_INFO AS INFO\n" +
													"JOIN \n" +
													"TB_M00_EMPLOYEE AS EMP\n" +
													"ON \n" +
													"INFO.KOREA_PM = EMP.EMP_ID\n" +
													"WHERE \n" +
													"(COALESCE(:projectNumber) IS NULL OR INFO.CD_V IN (:projectNumber))", nativeQuery = true)
									List<Object[]> getKoreaPMBySet(@Param("projectNumber") Set<String> projectNumber);
									@Query(value =
											"SELECT DISTINCT \n" +
													"EMP.EMP_ID \n" +
													", EMP.NAME \n" +
													", EMP.PHOTO \n" +
													", EMP.BIRTH_DATE\n" +
													", EMP.IP_ADDRESS\n" +
													"FROM \n" +
													"TB_PME00_PROJECT_INFO AS INFO\n" +
													"JOIN \n" +
													"TB_M00_EMPLOYEE AS EMP\n" +
													"ON \n" +
													"INFO.VIETNAM_PL = EMP.EMP_ID\n" +
													"WHERE \n" +
													"(COALESCE(:projectNumber) IS NULL OR INFO.CD_V IN (:projectNumber))", nativeQuery = true)
									List<Object[]> getVietnamPLBySet(@Param("projectNumber") Set<String> projectNumber);
								}								
	Standard 2:
		Entity:												
									package com.example.springbackend.entity;
									import com.fasterxml.jackson.annotation.JsonIgnore;
									import jakarta.persistence.*;
									import java.util.List;
									@Entity
									@Table(name = "user_info")
									public class UserInfo {
										@Id
										@GeneratedValue(strategy = GenerationType.IDENTITY)
										@Column(name = "id")
										private int id;
										@Column(name = "username")
										private String userName;
										@JsonIgnore
										@Column(name = "password")
										private String password;
										@Column(name = "fullname")
										private String fullName;
										@Column(name = "phone_number")
										private int phoneNumber;
										@Column(name = "authority")
										private String authority;
										@Column(name = "enabled")
										private boolean enabled;
										@JsonIgnore
										@OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
										private BankingAccount bankingAccount;
										@JsonIgnore
										@OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
										private BankingCard bankingCard;
										@JsonIgnore
										@OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
										private List<TransactionHistory> transactionHistory;
										public UserInfo() {
										}
										public UserInfo(String userName, String password, String fullName, int phoneNumber, String authority, boolean enabled) {
											this.userName = userName;
											this.password = password;
											this.fullName = fullName;
											this.phoneNumber = phoneNumber;
											this.authority = authority;
											this.enabled = enabled;
										}
										public int getId() {
											return id;
										}
										public void setId(int id) {
											this.id = id;
										}
										public String getUserName() {
											return userName;
										}
										public void setUserName(String userName) {
											this.userName = userName;
										}
										public String getPassword() {
											return password;
										}
										public void setPassword(String password) {
											this.password = password;
										}
										public String getFullName() {
											return fullName;
										}
										public void setFullName(String fullName) {
											this.fullName = fullName;
										}
										public int getPhoneNumber() {
											return phoneNumber;
										}
										public void setPhoneNumber(int phoneNumber) {
											this.phoneNumber = phoneNumber;
										}
										public String getAuthority() {
											return authority;
										}
										public void setAuthority(String authority) {
											this.authority = authority;
										}
										public boolean isEnabled() {
											return enabled;
										}
										public void setEnabled(boolean enabled) {
											this.enabled = enabled;
										}
										public BankingAccount getBankingAccount() {
											return bankingAccount;
										}
										public void setBankingAccount(BankingAccount bankingAccount) {
											this.bankingAccount = bankingAccount;
										}
										public BankingCard getBankingCard() {
											return bankingCard;
										}
										public void setBankingCard(BankingCard bankingCard) {
											this.bankingCard = bankingCard;
										}
										public List<TransactionHistory> getTransactionHistory() {
											return transactionHistory;
										}
										public void setTransactionHistory(List<TransactionHistory> transactionHistory) {
											this.transactionHistory = transactionHistory;
										}
										public void addTransactionHistory(TransactionHistory tempTransactionHistory) {
											this.transactionHistory.add(tempTransactionHistory);
											tempTransactionHistory.setUser(this);
										}
										@Override
										public String toString() {
											return "UserInfo{" +
													"id=" + id +
													", userName='" + userName + '\'' +
													", password='" + password + '\'' +
													", fullName='" + fullName + '\'' +
													", phoneNumber=" + phoneNumber +
													", authority='" + authority + '\'' +
													", enabled=" + enabled +
													'}';
										}
									}
		Controller:
									package com.example.springbackend.controller;
									import com.example.springbackend.entity.UserInfo;
									import com.example.springbackend.service.EmailConfirmationService;
									import com.example.springbackend.service.UserService;
									import org.springframework.beans.factory.annotation.Autowired;
									import org.springframework.http.ResponseEntity;
									import org.springframework.security.core.Authentication;
									import org.springframework.security.core.context.SecurityContextHolder;
									import org.springframework.ui.Model;
									import org.springframework.web.bind.annotation.*;
									import java.util.List;
									@RestController
									@RequestMapping("/")
									public class UserController {
										private UserService userService;
										@Autowired
										public UserController(UserService userService) {
											this.userService = userService;
										}
										@GetMapping("/user/findById/{userId}")
										public UserInfo findUserById(@PathVariable("userId") int userId) {
											return userService.findUserById(userId);
										}
										@GetMapping("/user/findByUsername/{userName}")
										public UserInfo findUserByUserName(@PathVariable("userName") String userName) {
											return userService.findUserByUserName(userName);
										}
										@GetMapping("/user/findByPhoneNumber/{phoneNumber}")
										public UserInfo findUserByPhoneNumber(@PathVariable("phoneNumber") int phoneNumber) {
											return userService.findUserByPhoneNumber(phoneNumber);
										}
										@GetMapping("/user/getAllUsers")
										public List<UserInfo> getAllUsers() {
											return userService.findAllUsers();
										}
										@CrossOrigin(origins = "http://localhost:3000")
										@PostMapping("/user")
										public void createUser(@ModelAttribute("user") UserInfo userInfo) {
											userInfo.setAuthority("ROLE_USER");
											userInfo.setEnabled(true);
											userService.saveUser(userInfo);
										}
										@PostMapping("/user/withDraw")
										public ResponseEntity<String> withDrawMoney(@RequestParam String nameOfAccountWithDraw, @RequestParam float amount) {
											return userService.withDrawMoney(nameOfAccountWithDraw, amount);
										}
										@PostMapping("/user/payThePill")
										public ResponseEntity<String> payTheBill(@RequestParam String nameOfAccountPayTheBill, @RequestParam float amount) {
											return userService.payTheBill(nameOfAccountPayTheBill, amount);
										}
									}

		Service:
		
			Service Interface:	
			
									package com.example.springbackend.service;
									import com.example.springbackend.entity.UserInfo;
									import org.springframework.http.ResponseEntity;
									import org.springframework.transaction.annotation.Transactional;
									import java.util.List;
									public interface UserService {
										UserInfo findUserById(int userId);
										List<UserInfo> findAllUsers();
										@Transactional
										void saveUser(UserInfo userInfo);
										UserInfo findUserByUserName(String userName);
										UserInfo findUserByPhoneNumber(int phoneNumber);
										@Transactional
										void updateUser(UserInfo userEntity);
										void deleteUserByUserName(String userName);
										void deleteUserById(int userId);
										public ResponseEntity<String> transferMoney(String nameOfAccountSend, String nameOfAccountReceive, float amount);
										public ResponseEntity<String> withDrawMoney(String nameOfAccountWithDraw, float amount);
										public ResponseEntity<String> payTheBill(String nameOfAccountPayTheBill, float amount);
									}
			
			Service Implement:
			
									package com.example.springbackend.service.impl;
									import com.example.springbackend.dao.UserDAO;
									import com.example.springbackend.entity.BankingAccount;
									import com.example.springbackend.entity.TransactionHistory;
									import com.example.springbackend.entity.UserInfo;
									import com.example.springbackend.handler.NotFoundException;
									import com.example.springbackend.service.BankingAccountService;
									import com.example.springbackend.service.UserService;
									import org.springframework.beans.factory.annotation.Autowired;
									import org.springframework.http.ResponseEntity;
									import org.springframework.mail.SimpleMailMessage;
									import org.springframework.stereotype.Service;
									import org.springframework.transaction.annotation.Transactional;
									import java.sql.Timestamp;
									import java.time.LocalDateTime;
									import java.util.List;
									@Service
									public class UserServiceImpl implements UserService {
										private UserDAO userDao;
										@Autowired
										public UserServiceImpl(UserDAO userDAO) {
											this.userDao = userDAO;
										}
										@Override
										public UserInfo findUserById(int userId) {
											UserInfo user = userDao.findUserById(userId);
											if (user == null) {
												throw new NotFoundException("User id not found - " + userId);
											}
											return user;
										}
										@Override
										public List<UserInfo> findAllUsers() {
											return userDao.findAllUsers();
										}
										@Transactional
										@Override
										public void saveUser(UserInfo userInfo) {
											userDao.saveUser(userInfo);
										}
										@Override
										public UserInfo findUserByUserName(String userName) {

											return userDao.findUserByUserName(userName);
										}
										@Override
										public UserInfo findUserByPhoneNumber(int phoneNumber) {
											return userDao.findUserByPhoneNumber(phoneNumber);
										}
										@Override
										public void updateUser(UserInfo userEntity) {
											userDao.updateUser(userEntity);
										}

										@Transactional
										@Override
										public void deleteUserByUserName(String userName) {
											userDao.deleteUserByUserName(userName);
										}
										@Transactional
										@Override
										public void deleteUserById(int userId) {
											userDao.deleteUserById(userId);
										}
										@Transactional
										@Override
										public ResponseEntity<String> transferMoney(String nameOfAccountSend, String nameOfAccountReceive, float amount) {
											UserInfo userInfoSent = userDao.findUserByUserName(nameOfAccountSend);
											UserInfo userInfoReceive = userDao.findUserByUserName(nameOfAccountReceive);
											if (userInfoSent == null || userInfoReceive == null)
												return ResponseEntity.badRequest().body("Invalid account username");
											if (userInfoSent.getBankingAccount().getAccountBalance() < amount)
												return ResponseEntity.badRequest().body("Not enough balance");
											userInfoSent.getBankingAccount().setAccountBalance(userInfoSent.getBankingAccount().getAccountBalance() - amount);
											userInfoReceive.getBankingAccount().setAccountBalance(userInfoReceive.getBankingAccount().getAccountBalance() + amount);
											TransactionHistory tempTransactionHistorySent = new TransactionHistory("Transfer", -amount, Timestamp.valueOf(LocalDateTime.now()));
											userInfoSent.addTransactionHistory(tempTransactionHistorySent);
											TransactionHistory tempTransactionHistoryReceive = new TransactionHistory("Receive", +amount, Timestamp.valueOf(LocalDateTime.now()));
											userInfoReceive.addTransactionHistory(tempTransactionHistoryReceive);
											userDao.updateUser(userInfoSent);
											userDao.updateUser(userInfoReceive);
											return ResponseEntity.ok("Money transferred successfully");
										}
										@Transactional
										@Override
										public ResponseEntity<String> withDrawMoney(String nameOfAccountWithDraw, float amount) {
											UserInfo userInfoWithDraw = userDao.findUserByUserName(nameOfAccountWithDraw);
											if (userInfoWithDraw == null)
												return ResponseEntity.badRequest().body("Invalid account numbers");
											if (userInfoWithDraw.getBankingAccount().getAccountBalance() < amount)
												return ResponseEntity.badRequest().body("Not enough balance");
											userInfoWithDraw.getBankingAccount().setAccountBalance(userInfoWithDraw.getBankingAccount().getAccountBalance() - amount);
											TransactionHistory tempTransactionHistoryWithdraw = new TransactionHistory("Withdraw", -amount, Timestamp.valueOf(LocalDateTime.now()));
											userInfoWithDraw.addTransactionHistory(tempTransactionHistoryWithdraw);
											userDao.updateUser(userInfoWithDraw);
											return ResponseEntity.ok("Money withdrew successfully");
										}
										@Transactional
										@Override
										public ResponseEntity<String> payTheBill(String nameOfAccountPayTheBill, float amount) {
											UserInfo userInfoPayTheBill = userDao.findUserByUserName(nameOfAccountPayTheBill);
											if (userInfoPayTheBill == null)
												return ResponseEntity.badRequest().body("Invalid account numbers");
											if (userInfoPayTheBill.getBankingAccount().getAccountBalance() < amount)
												return ResponseEntity.badRequest().body("Not enough balance");
											userInfoPayTheBill.getBankingAccount().setAccountBalance(userInfoPayTheBill.getBankingAccount().getAccountBalance() - amount);
											TransactionHistory tempTransactionHistoryWithdraw = new TransactionHistory("Pay the bill", -amount, Timestamp.valueOf(LocalDateTime.now()));
											userInfoPayTheBill.addTransactionHistory(tempTransactionHistoryWithdraw);
											userDao.updateUser(userInfoPayTheBill);
											return ResponseEntity.ok("Pay the bill successfully");
										}
									}																	
		DAO:
			DAO Interface:
									package com.example.springbackend.dao;
									import com.example.springbackend.entity.UserInfo;
									import java.util.List;
									public interface UserDAO {
										UserInfo findUserById(int userId);
										List<UserInfo> findAllUsers();
										void saveUser(UserInfo userInfo);
										UserInfo findUserByUserName(String userName);
										UserInfo findUserByPhoneNumber(int phoneNumber);
										void updateUser(UserInfo userEntity);
										void deleteUserByUserName(String userName);
										void deleteUserById(int userId);
									}
			DAO Implement:
									
									Khi Spring gặp annotation @Autowired trên constructor UserDAOImpl, nó sẽ tự động chèn một instance của EntityManager vào đó. Do đó, constructor public UserDAOImpl(EntityManager
									entityManager) sẽ được chạy khi Spring cần tạo một instance mới của UserDAOImpl để sử dụng, và nó sẽ được chạy với một instance của EntityManager được chèn vào.
									
									package com.example.springbackend.dao.impl;
									import com.example.springbackend.dao.UserDAO;
									import com.example.springbackend.entity.BankingAccount;
									import com.example.springbackend.entity.BankingCard;
									import com.example.springbackend.entity.UserInfo;
									import jakarta.persistence.EntityManager;
									import jakarta.persistence.TypedQuery;
									import org.springframework.beans.factory.annotation.Autowired;
									import org.springframework.stereotype.Repository;
									import java.sql.Timestamp;
									import java.util.List;
									@Repository
									public class UserDAOImpl implements UserDAO {
										private EntityManager entityManager;
										@Autowired
										public UserDAOImpl(EntityManager entityManager) {
											this.entityManager = entityManager;
										}
										@Override
										public UserInfo findUserById(int userId) {
											UserInfo user = entityManager.find(UserInfo.class, userId);
											return user;
										}
										@Override
										public List<UserInfo> findAllUsers() {
											TypedQuery<UserInfo> theQuery = entityManager.createQuery("from UserInfo", UserInfo.class);
											List<UserInfo> userLists = theQuery.getResultList();
											return userLists;
										}
										@Override
										public void saveUser(UserInfo userInfo) {
											BankingAccount bankingAccount = new BankingAccount(1000000);
											userInfo.setBankingAccount(bankingAccount);
											bankingAccount.setUser(userInfo);
											Timestamp timestamp = Timestamp.valueOf("2030-01-01 00:00:00");
											BankingCard bankingCard = new BankingCard(true, timestamp);
											userInfo.setBankingCard(bankingCard);
											bankingCard.setUser(userInfo);
											entityManager.persist(userInfo);
										}
										@Override
										public UserInfo findUserByUserName(String userName) {
											TypedQuery<UserInfo> theQuery = entityManager.createQuery("FROM UserInfo WHERE userName=:data", UserInfo.class);
											theQuery.setParameter("data", userName);
											List<UserInfo> results = theQuery.getResultList();
											if (!results.isEmpty()) {
												return results.get(0);
											}
											return null;
										}
										@Override
										public UserInfo findUserByPhoneNumber(int phoneNumber) {
											TypedQuery<UserInfo> theQuery = entityManager.createQuery("FROM UserInfo WHERE phoneNumber=:data", UserInfo.class);
											theQuery.setParameter("data", phoneNumber);
											return theQuery.getSingleResult();
										}
										@Override
										public void updateUser(UserInfo userEntity) {
											entityManager.merge(userEntity);
										}
										@Override
										public void deleteUserByUserName(String userName) {
											int deleteCount = entityManager.createQuery("DELETE FROM UserInfo WHERE userName=:data", UserInfo.class)
																		   .setParameter("data", userName)
																		   .executeUpdate();
										}
										@Override
										public void deleteUserById(int userId) {
											UserInfo user = entityManager.find(UserInfo.class, userId);
											entityManager.remove(user);
										}
									}
		Security:
									package com.example.springbackend.security;
									import org.springframework.context.annotation.Bean;
									import org.springframework.context.annotation.Configuration;
									import org.springframework.http.HttpMethod;
									import org.springframework.security.config.Customizer;
									import org.springframework.security.config.annotation.web.builders.HttpSecurity;
									import org.springframework.security.config.annotation.web.builders.WebSecurity;
									import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
									import org.springframework.security.core.userdetails.User;
									import org.springframework.security.core.userdetails.UserDetails;
									import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
									import org.springframework.security.provisioning.InMemoryUserDetailsManager;
									import org.springframework.security.provisioning.JdbcUserDetailsManager;
									import org.springframework.security.provisioning.UserDetailsManager;
									import org.springframework.security.web.SecurityFilterChain;
									import javax.sql.DataSource;
									@Configuration
									public class SecurityConfig {
									   @Bean
									   public UserDetailsManager userDetailsManager(DataSource dataSource) {
										   JdbcUserDetailsManager theUserDetailsManager = new JdbcUserDetailsManager(dataSource);
										   theUserDetailsManager.setUsersByUsernameQuery("select username, password, enabled from user_info where username = ?");
										   theUserDetailsManager.setAuthoritiesByUsernameQuery("select username, authority from user_info where username = ?");
										   return theUserDetailsManager;
									   }
									   @Bean
									   public SecurityFilterChain filterConfig(HttpSecurity http) throws Exception {
										   http.authorizeHttpRequests(configurer ->
												   configurer
														   .requestMatchers("/").permitAll()
														   .requestMatchers("/css/**").permitAll()
														   .requestMatchers("/js/**").permitAll()
														   .requestMatchers("/img/**").permitAll()
														   .requestMatchers("/showSignUpPage").permitAll()
														   .requestMatchers("/subscribe").permitAll()
														   .requestMatchers("/user/signUpToken").permitAll()
														   .requestMatchers("/signUpTokenConfirm").permitAll()
														   .requestMatchers("/user/transferTokenCheck").permitAll()
														   .requestMatchers(HttpMethod.GET, "/showInfoPage").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/findByUserLoggedIn").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/showTransferPage").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.POST, "/user/transferMoney").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/showPaymentPage").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.POST, "/user/payTheBill").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/showChangingPassword").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.POST, "/user/changePassword").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/showTransactionHistory").hasAnyRole("USER", "EMPLOYEE", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/admin/listOfUsers").hasRole("ADMIN")
														   .requestMatchers(HttpMethod.GET, "/").hasAnyRole("USER", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/").hasAnyRole("USER", "MANAGER", "ADMIN")
														   .requestMatchers(HttpMethod.GET, "/user").hasRole("MANAGER")
														   .requestMatchers(HttpMethod.GET, "/user/**").hasRole("MANAGER")
														   .requestMatchers(HttpMethod.PUT, "/user").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/user/update").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/addTodo").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.DELETE, "/user/findById/**").hasRole("ADMIN")
														   .requestMatchers(HttpMethod.DELETE, "/user/findByUsername/**").hasRole("ADMIN")
														   .requestMatchers(HttpMethod.DELETE, "/user/delete/userId/**").hasRole("ADMIN")
														   .requestMatchers(HttpMethod.DELETE, "/user/delete/userName").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/user/transferMoney").hasRole("MANAGER")
														   .requestMatchers(HttpMethod.POST, "/user/delete/{username}").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.DELETE, "/user/delete/**").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.GET, "/user/delete/**").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.PUT, "/user/delete/**").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/user/delete/**").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/user/showUpdateUserForm").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/user/update").hasAnyRole("ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/transferMoney").hasAnyRole("USER", "EMPLOYEE" ,"ADMIN", "MANAGER")
														   .requestMatchers(HttpMethod.POST, "/checkReceiverAccountNumber").hasAnyRole("USER", "EMPLOYEE" ,"ADMIN", "MANAGER")
												   )
												   .formLogin(form -> form.loginPage("/showMyLoginPage")
																		  .loginProcessingUrl("/authenticateTheUser")
																		  .defaultSuccessUrl("/", true)
																		  .permitAll()
												   )
												   .logout(logout -> logout.logoutSuccessUrl("/")
																		   .permitAll());
									       //http.httpBasic(); // use HTTP Basic authentication
										   http.httpBasic(Customizer.withDefaults());       
										   http.csrf(csrf -> csrf.disable()); // disable Cross Site Request Forgery (CSRF)
																			  // in general, not required for stateless REST APIs that use POST, PUT, DELETE and/or PATCH
										   return http.build();
									   }
									      //@Bean
									      //public BCryptPasswordEncoder passwordEncoder() {
									          //return new BCryptPasswordEncoder();
									      //}
									}
		Handler:
									package com.example.springbackend.handler;
									import org.springframework.http.HttpStatus;
									import org.springframework.http.ResponseEntity;
									import org.springframework.web.ErrorResponse;
									import org.springframework.web.bind.annotation.ControllerAdvice;
									import org.springframework.web.bind.annotation.ExceptionHandler;
									import org.springframework.web.bind.annotation.RestControllerAdvice;
									import org.springframework.web.servlet.ModelAndView;
									@RestControllerAdvice
									public class GlobalAdvice {
										@ExceptionHandler({NotFoundException.class})
										public ResponseEntity<String> handleNotFoundException(NotFoundException ex) {
											return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
										}
									}
									
									package com.example.springbackend.handler;
									public class NotFoundException extends RuntimeException {
										public NotFoundException(String message) {
											super(message);
										}
									}			