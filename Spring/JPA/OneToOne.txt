@OneToOne--SPRING:
												 
						- Whoever owns the foreign key column gets the @JoinColumn annotation.
						- mapped chỉ là phần phát sinh thêm trong code Java, nên sẽ theo tên của cột trong Java
						- Khóa ngoại có thể đặt ở một trong hai bảng hoặc kết hợp hai bảng.
	
	Ví dụ One-To-One Unidirectional Relationship:
	
		Việc gọi stockRepository.save(stock); là không cần thiết khi bạn đã sử dụng CascadeType.ALL trong quan hệ giữa Product và Stock.
		
		Điều này có nghĩa là mọi thao tác (như persist, merge, remove, refresh, detach) thực hiện trên thực thể Product cũng sẽ được thực hiện trên
		thực thể Stock. Nói cách khác, nếu bạn lưu một Product, JPA sẽ tự động lưu Stock liên kết với nó mà không cần phải gọi
		
	
												package com.example.springdatajpa;
												import com.example.springdatajpa.entities.Product;
												import com.example.springdatajpa.entities.Stock;
												import com.example.springdatajpa.entities.StockStatus;
												import com.example.springdatajpa.repositories.ProductRepository;
												import com.example.springdatajpa.repositories.StockRepository;
												import lombok.extern.slf4j.Slf4j;
												import org.springframework.boot.SpringApplication;
												import org.springframework.boot.autoconfigure.SpringBootApplication;
												import org.springframework.context.ApplicationContext;
												@SpringBootApplication
												@Slf4j
												public class SpringDataJpaApplication {
													@Autowired
													private ProductService productService;
													 public static void main(String[] args)
													 {
													  ApplicationContext context = SpringApplication.run(SpringDataJpaApplication.class, args);
													  ProductRepository productRepository = context.getBean(ProductRepository.class);
													  StockRepository stockRepository = context.getBean(StockRepository.class);
													  Product product = new Product();
													  product.setProductName("iPad");
													  product.setProductPrice(59999);												 
													  Stock stock = new Stock();
													  stock.setStockQuantity(74);
													  stock.setStockStatus(StockStatus.IN_STOCK);
													 // Save product with stock
													 productService.saveProductWithStock(product, stock);											  
													 }
												}
												
												package com.example.springdatajpa;
												import com.example.springdatajpa.entities.Product;
												import com.example.springdatajpa.entities.Stock;
												import com.example.springdatajpa.entities.StockStatus;
												import com.example.springdatajpa.repositories.ProductRepository;
												import com.example.springdatajpa.repositories.StockRepository;
												import lombok.extern.slf4j.Slf4j;
												import org.springframework.boot.SpringApplication;
												import org.springframework.boot.autoconfigure.SpringBootApplication;
												import org.springframework.context.ApplicationContext;
												@SpringBootApplication
												@Slf4j
												public class SpringDataJpaApplication
												{
												 public static void main(String[] args)
												 {
												  ApplicationContext context = SpringApplication.run(SpringDataJpaApplication.class, args);
												  ProductRepository productRepository = context.getBean(ProductRepository.class);
												  StockRepository stockRepository = context.getBean(StockRepository.class);
												  Product product = new Product();
												  product.setProductName("iPhone");
												  product.setProductPrice(85999);
												  Stock stock = new Stock();
												  stock.setStockQuantity(32);
												  stock.setStockStatus(StockStatus.IN_STOCK);
												  product.setStock(stock);
												  productRepository.save(product);												 
												  log.info("Saved Product and Stock Information : {} {}", product.getProductName(), product.getStock());
												 }
												}		
	
												package com.example.springdatajpa.entities;
												import jakarta.persistence.*;
												import lombok.Data;
												@Entity
												@Table(name = "products")
												@Data
												//@ToString(exclude = "stock")
												public class Product
												{
													@Id
													@GeneratedValue(strategy = GenerationType.IDENTITY)
													private int productId;
													private String productName;
													private int productPrice;
													@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
													@JoinColumn(name = "stock_id", referencedColumnName = "stockId")  // This means Foreign key will be created only in the Product
																													  // table i.e. extra column 'stock_id' will be created in the Product table
													private Stock stock;
													// Product-Stock One-To-One Unidirectional Relationship Mapping
													// By using CascadeType.ALL, it essentially means that any operation performed on the parent entity should also be performed on the child entity.
													// With FetchType.LAZY and @ToString(exclude = "stock") at the entity Class level,
													// it will fetch the details of the Parent only i.e. Product
													// With FetchType.EAGER, it will fetch the details of the Child along with the Parent i.e.
													// both Stock and Product details
												}
												
												package com.example.springdatajpa.entities;
												import jakarta.persistence.*;
												import lombok.Data;
												@Entity
												@Table(name = "stocks")
												@Data
												public class Stock
												{
													@Id
													@GeneratedValue(strategy = GenerationType.IDENTITY)
													private int stockId;
													private int stockQuantity;
													@Enumeraed(EnumType.STRING)
													private StockStatus stockStatus;

												}
												
												package com.example.springdatajpa.entities;
												public enum StockStatus
												{
													IN_STOCK, OUT_OF_STOCK
												}
												
												package com.example.springdatajpa.repositories;
												import com.example.springdatajpa.entities.Product;
												import org.springframework.data.jpa.repository.JpaRepository;
												public interface ProductRepository extends JpaRepository<Product,Integer>
												{
												}
												
												package com.example.springdatajpa.repositories;
												import com.example.springdatajpa.entities.Stock;
												import org.springframework.data.jpa.repository.JpaRepository;
												public interface StockRepository extends JpaRepository<Stock,Integer>
												{
												}
												
												@Service
												public class ProductService {
													@Autowired
													private ProductRepository productRepository;
													@Autowired
													private StockRepository stockRepository;
													public void saveProductWithStock(Product product, Stock stock) {
														product.setStock(stock);  // Associate the product with the stock
														// Save the stock (which cascades to product due to CascadeType.ALL)
														stockRepository.save(stock);
														// Save the product
														productRepository.save(product);
													}
												}											

	Ví dụ One-To-One Bidirectional Relationship
	
		Việc thiết lập cả hai liên kết giúp duy trì tính nhất quán giữa hai thực thể trong mối quan hệ hai chiều. Nếu chỉ thiết lập một bên (ví dụ, chỉ thiết lập liên kết từ Product đến Stock mà
		không thiết lập ngược lại), thì thông tin về sản phẩm liên kết với kho hàng sẽ không hoàn chỉnh và bạn có thể gặp khó khăn trong việc điều hướng và truy xuất thông tin.
	
												package com.example.springdatajpa;
												import com.example.springdatajpa.entities.Product;
												import com.example.springdatajpa.entities.Stock;
												import com.example.springdatajpa.entities.StockStatus;
												import com.example.springdatajpa.repositories.ProductRepository;
												import com.example.springdatajpa.repositories.StockRepository;
												import lombok.extern.slf4j.Slf4j;
												import org.springframework.boot.SpringApplication;
												import org.springframework.boot.autoconfigure.SpringBootApplication;
												import org.springframework.context.ApplicationContext;
												@SpringBootApplication
												@Slf4j
												public class SpringDataJpaApplication
												{
												 public static void main(String[] args)
												 {
												  ApplicationContext context = SpringApplication.run(SpringDataJpaApplication.class, args);
												  ProductRepository productRepository = context.getBean(ProductRepository.class);
												  StockRepository stockRepository = context.getBean(StockRepository.class);
												  Product product = new Product();
												  product.setProductName("MacBook Pro M3");
												  product.setProductPrice(151999);
												  Stock stock = new Stock();
												  stock.setStockQuantity(99);
												  stock.setStockStatus(StockStatus.IN_STOCK);
												  product.setStock(stock);
												  stock.setProduct(product);
												  productRepository.save(product);
												  // log.info("Saved Product and Stock Information : {} {}", product.getProductName(), product.getStock());
												 }
												}													
												
												package com.example.springdatajpa.entities;
												import jakarta.persistence.*;
												import lombok.Data;
												@Entity
												@Table(name = "products")
												@Data
												public class Product
												{
													@Id
													@GeneratedValue(strategy = GenerationType.IDENTITY)
													private int productId;
													private String productName;
													private int productPrice;
													@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
													@JoinColumn(name = "stock_id", referencedColumnName = "stockId")  // This means Foreign key will be created only in the Product table
																													  // i.e. extra column 'stock_id' will be created in the Product table
													private Stock stock;
													// Product-Stock One-To-One Unidirectional Relationship Mapping
													// With FetchType.LAZY and @ToString(exclude = "stock") at the entity Class level,
													// it will fetch the details of the Parent only i.e. Product
													// With FetchType.EAGER, it will fetch the details of the Child along with the Parent i.e.
													// both Stock and Product details
												}
												
												package com.example.springdatajpa.entities;
												import jakarta.persistence.*;
												import lombok.Data;
												@Entity
												@Table(name = "stocks")
												@Data
												public class Stock
												{
													@Id
													@GeneratedValue(strategy = GenerationType.IDENTITY)
													private int stockId;
													private int stockQuantity;
													@Enumerated(EnumType.STRING)
													private StockStatus stockStatus;
													@OneToOne(mappedBy = "stock")  // Can define 'cascade = CascadeType.ALL' here as well instead of in Product entity
													private Product product;
												}
												
												package com.example.springdatajpa.entities;
												public enum StockStatus
												{
													IN_STOCK, OUT_OF_STOCK
												}												

	Example 1:
	
												import javax.persistence.Entity;
												import javax.persistence.GeneratedValue;
												import javax.persistence.Id;
												import javax.persistence.JoinColumn;
												import javax.persistence.OneToOne;
												import lombok.Builder;
												import lombok.Data;
												@Entity // Hibernate entity
												@Data // Lombok 
												@Builder // Lombok
												public class Person { //Table person
													@Id // Đánh dấu trường này là primary key
													@GeneratedValue // Tự động tăng giá trị id
													private Long id;
													private String name;
												}
												@Entity
												@Data
												@Builder
												public class Address { // Table address
													@Id
													@GeneratedValue
													private Long id;
													private String city;
													private String province;
													@OneToOne // Đánh dấu có mỗi quan hệ 1-1 với Person ở phía dưới
													@JoinColumn(name = "person_id") // Liên kết với nhau qua khóa ngoại person_id
													private Person person; 
												}
												
												import javax.transaction.Transactional;
												import org.springframework.boot.CommandLineRunner;
												import org.springframework.boot.SpringApplication;
												import org.springframework.boot.autoconfigure.SpringBootApplication;
												import com.google.common.collect.Lists;
												import lombok.RequiredArgsConstructor;
												@SpringBootApplication
												@RequiredArgsConstructor
												public class OneToOneExampleApplication implements CommandLineRunner {
													public static void main(String[] args) {
														SpringApplication.run(OneToOneExampleApplication.class, args);
													}
													// Sử dụng @RequiredArgsConstructor và final để thay cho @Autowired
													private final PersonRepository personRepository;
													private final AddressRepository addressRepository;
													@Override
													public void run(String... args) throws Exception {
														// Tạo ra đối tượng person
														Person person = Person.builder()
																			  .name("loda")
																			  .build();
														// Lưu vào db
														personRepository.save(person);
														// Tạo ra đối tượng Address có tham chiếu tới person
														Address address = Address.builder()
																.city("Hanoi")
																.person(person)
																.build();
														// Lưu vào db
														addressRepository.save(address);
														// Vào: http://localhost:8080/h2-console/ để xem dữ liệu đã insert
													}
												}
												
												Vậy là thằng Address đã liên kết tới Person có id=1.
		
	Example 2:
	
												CREATE TABLE `address` (
												  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
												  PRIMARY KEY (`cart_id`)
												  'street' varchar(45),
												  'city' varchar(45)
												) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
												
												CREATE TABLE `user` (
												  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
												  `phone` int(11),
												  'name' varchar(45)
												  KEY `adress_id` (`user_address`),
												  CONSTRAINT `usser_address` FOREIGN KEY (`id`) REFERENCES `Address` (`address_id`)
												) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
												
												@Entity
												@Table(name = "users")
												public class User {
													@Id
													@GeneratedValue(strategy = GenerationType.AUTO)
													@Column(name = "id")
													private Long id;
													//...
													@OneToOne(cascade = CascadeType.ALL)
													@JoinColumn(name = "address_id", referencedColumnName = "id")
													private Address address; // biến address này sẽ trùng  với giá trị  mappedBy trong Class User 
													// ... getters and setters
												}
												
												@Entity
												@Table(name = "address")
												public class Address {
													@Id
													@GeneratedValue(strategy = GenerationType.AUTO)
													@Column(name = "id")
													private Long id;
													//...
													@OneToOne(mappedBy = "address")
													private User user;
													//... getters and setters
												}
												
												Address address = new Address ("Address 1");
												User user  = new User();
												user.setAddress(address);
												user.save(); // như vậy ta sẽ lưu dữ liệu xuống 2 bảng User và Address
	
	Example 3:
												
												@OneToOne(cascade=CascadeType.ALL)
												@JoinColumn(name="instructor_detail_id")
												private InstructorDetail instructorDetail;
												
												@Entity
												public class User {   
													//...
													@OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
													private Address address;
													//...
												}
												
												@Entity
												public class Address {
													//...
													@OneToOne
													@JoinColumn(name = "user_id")
													private User user;  
													//...
												}
												
												private void createInstructor(AppDAO appDAO) {													
													Instructor tempInstructor = new Instructor("Chad", "Darby", "darby@luv2code.com"); // create the instructor																										
													InstructorDetail tempInstructorDetail = new InstructorDetail( "http://www.luv2code.com/youtube", "Luv 2 code!!!"); // create the instructor detail																										
													tempInstructor.setInstructorDetail(tempInstructorDetail); // associate the objects																										
													System.out.println("Saving instructor: " + tempInstructor);
													appDAO.save(tempInstructor); // save the instructor													
													System.out.println("Done!");														
												}
												
	Example 4:

												@Entity
												@Table(name = "users")
												public class User {												
													@Id
													@GeneratedValue(strategy = GenerationType.AUTO)
													@Column(name = "id")
													private Long id;
													//... 
													@OneToOne(cascade = CascadeType.ALL)
													@JoinColumn(name = "address_id", referencedColumnName = "id")
													private Address address;
													// ... getters and setters
												}
												
												@Entity
												@Table(name = "address")
												public class Address {
													@Id
													@GeneratedValue(strategy = GenerationType.AUTO)
													@Column(name = "id")
													private Long id;
													//...
													@OneToOne(mappedBy = "address")
													private User user;
													//... getters and setters
												}
	
	Example 5:
	
		sql:
		
												DROP SCHEMA IF EXISTS `hb-01-one-to-one-uni`;
												CREATE SCHEMA `hb-01-one-to-one-uni`;
												use `hb-01-one-to-one-uni`;
												SET FOREIGN_KEY_CHECKS = 0;
												CREATE TABLE `instructor_detail` (
												  `id` int NOT NULL AUTO_INCREMENT,
												  `youtube_channel` varchar(128) DEFAULT NULL,
												  `hobby` varchar(45) DEFAULT NULL,
												  PRIMARY KEY (`id`)
												) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;
												CREATE TABLE `instructor` (
												  `id` int NOT NULL AUTO_INCREMENT,
												  `first_name` varchar(45) DEFAULT NULL,
												  `last_name` varchar(45) DEFAULT NULL,
												  `email` varchar(45) DEFAULT NULL,
												  `instructor_detail_id` int DEFAULT NULL,
												  PRIMARY KEY (`id`),
												  KEY `FK_DETAIL_idx` (`instructor_detail_id`),
												  CONSTRAINT `FK_DETAIL` FOREIGN KEY (`instructor_detail_id`) REFERENCES `instructor_detail` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
												) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;
												SET FOREIGN_KEY_CHECKS = 1;
												
		Instructor.java:
		
												package com.luv2code.cruddemo.entity;
												import jakarta.persistence.*;
												@Entity
												@Table(name="instructor")
												public class Instructor {
													// annotate the class as an entity and map to db table
													// define the fields
													// annotate the fields with db column names
													// ** set up mapping to InstructorDetail entity
													// create constructors
													// generate getter/setter methods
													// generate toString() method
													@Id
													@GeneratedValue(strategy = GenerationType.IDENTITY)
													@Column(name="id")
													private int id;
													@Column(name="first_name")
													private String firstName;
													@Column(name="last_name")
													private String lastName;
													@Column(name="email")
													private String email;
													@OneToOne(cascade = CascadeType.ALL)
													@JoinColumn(name = "instructor_detail_id")
													private InstructorDetail instructorDetail;
													public Instructor() {
													}
													public Instructor(String firstName, String lastName, String email) {
														this.firstName = firstName;
														this.lastName = lastName;
														this.email = email;
													}
													public int getId() {
														return id;
													}
													public void setId(int id) {
														this.id = id;
													}
													public String getFirstName() {
														return firstName;
													}
													public void setFirstName(String firstName) {
														this.firstName = firstName;
													}
													public String getLastName() {
														return lastName;
													}
													public void setLastName(String lastName) {
														this.lastName = lastName;
													}
													public String getEmail() {
														return email;
													}
													public void setEmail(String email) {
														this.email = email;
													}
													public InstructorDetail getInstructorDetail() {
														return instructorDetail;
													}
													public void setInstructorDetail(InstructorDetail instructorDetail) {
														this.instructorDetail = instructorDetail;
													}
													@Override
													public String toString() {
														return "Instructor{" +
																"id=" + id +
																", firstName='" + firstName + '\'' +
																", lastName='" + lastName + '\'' +
																", email='" + email + '\'' +
																", instructorDetail=" + instructorDetail +
																'}';
													}
												}
												
		InstructorDetail.java:
		
												package com.luv2code.cruddemo.entity;
												import jakarta.persistence.*;
												@Entity
												@Table(name="instructor_detail")
												public class InstructorDetail {
													// annotate the class as an entity and map to db table
													// define the fields
													// annotate the fields with db column names
													// create constructors
													// generate getter/setter methods
													// generate toString() method
													@Id
													@GeneratedValue(strategy = GenerationType.IDENTITY)
													@Column(name="id")
													private int id;
													@Column(name="youtube_channel")
													private String youtubeChannel;
													@Column(name="hobby")
													private String hobby;
													// add @OneToOne annotation
													@OneToOne(mappedBy = "instructorDetail",
															cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
													private Instructor instructor;
													public InstructorDetail() {
													}
													public InstructorDetail(String youtubeChannel, String hobby) {
														this.youtubeChannel = youtubeChannel;
														this.hobby = hobby;
													}
													public int getId() {
														return id;
													}
													public void setId(int id) {
														this.id = id;
													}
													public String getYoutubeChannel() {
														return youtubeChannel;
													}
													public void setYoutubeChannel(String youtubeChannel) {
														this.youtubeChannel = youtubeChannel;
													}
													public String getHobby() {
														return hobby;
													}
													public void setHobby(String hobby) {
														this.hobby = hobby;
													}
													public Instructor getInstructor() {
														return instructor;
													}
													public void setInstructor(Instructor instructor) {
														this.instructor = instructor;
													}
													@Override
													public String toString() {
														return "InstructorDetail{" +
																"id=" + id +
																", youtubeChannel='" + youtubeChannel + '\'' +
																", hobby='" + hobby + '\'' +
																'}';
													}
												}
												
		AppDAOImpl.java:
		
												package com.luv2code.cruddemo.dao;
												import com.luv2code.cruddemo.entity.Instructor;
												import com.luv2code.cruddemo.entity.InstructorDetail;
												import jakarta.persistence.EntityManager;
												import org.springframework.beans.factory.annotation.Autowired;
												import org.springframework.stereotype.Repository;
												import org.springframework.transaction.annotation.Transactional;
												@Repository
												public class AppDAOImpl implements AppDAO {
													// define field for entity manager
													private EntityManager entityManager;
													// inject entity manager using constructor injection
													@Autowired
													public AppDAOImpl(EntityManager entityManager) {
														this.entityManager = entityManager;
													}
													@Override
													@Transactional
													public void save(Instructor theInstructor) {
														entityManager.persist(theInstructor);
													}
													@Override
													public Instructor findInstructorById(int theId) {
														return entityManager.find(Instructor.class, theId);
													}
													@Override
													@Transactional
													public void deleteInstructorById(int theId) {
														// retrieve the instructor
														Instructor tempInstructor = entityManager.find(Instructor.class, theId);
														// delete the instructor
														entityManager.remove(tempInstructor);
													}
													@Override
													public InstructorDetail findInstructorDetailById(int theId) {
														return entityManager.find(InstructorDetail.class, theId);
													}
													@Override
													@Transactional
													public void deleteInstructorDetailById(int theId) {
														// retrieve instructor detail
														InstructorDetail tempInstructorDetail = entityManager.find(InstructorDetail.class, theId);
														// remove the associated object reference
														// break bi-directional link
														//
														tempInstructorDetail.getInstructor().setInstructorDetail(null);
														// delete the instructor detail
														entityManager.remove(tempInstructorDetail);
													}
												}
												
		CruddemoApplication.java:
		
												package com.luv2code.cruddemo;
												import com.luv2code.cruddemo.dao.AppDAO;
												import com.luv2code.cruddemo.entity.Instructor;
												import com.luv2code.cruddemo.entity.InstructorDetail;
												import org.springframework.boot.CommandLineRunner;
												import org.springframework.boot.SpringApplication;
												import org.springframework.boot.autoconfigure.SpringBootApplication;
												import org.springframework.context.annotation.Bean;
												@SpringBootApplication
												public class CruddemoApplication {
													public static void main(String[] args) {
														SpringApplication.run(CruddemoApplication.class, args);
													}
													@Bean
													public CommandLineRunner commandLineRunner(AppDAO appDAO) {
														return runner -> {
															// createInstructor(appDAO);
															// findInstructor(appDAO);
															// deleteInstructor(appDAO);
															// findInstructorDetail(appDAO);
															deleteInstructorDetail(appDAO);
														};
													}
													private void deleteInstructorDetail(AppDAO appDAO) {
														int theId = 3;
														System.out.println("Deleting instructor detail id: " + theId);
														appDAO.deleteInstructorDetailById(theId);
														System.out.println("Done!");
													}
													private void findInstructorDetail(AppDAO appDAO) {
														// get the instructor detail object
														int theId = 2;
														InstructorDetail tempInstructorDetail = appDAO.findInstructorDetailById(theId);
														// print the instructor detail
														System.out.println("tempInstructorDetail: " + tempInstructorDetail);
														// print the associated instructor
														System.out.println("the associated instructor: " + tempInstructorDetail.getInstructor());
														System.out.println("Done!");
													}
													private void deleteInstructor(AppDAO appDAO) {
														int theId = 1;
														System.out.println("Deleting instructor id: " + theId);
														appDAO.deleteInstructorById(theId);
														System.out.println("Done!");
													}
													private void findInstructor(AppDAO appDAO) {
														int theId = 2;
														System.out.println("Finding instructor id: " + theId);
														Instructor tempInstructor = appDAO.findInstructorById(theId);
														System.out.println("tempInstructor: " + tempInstructor);
														System.out.println("the associated instructorDetail only: " + tempInstructor.getInstructorDetail());
													}
													private void createInstructor(AppDAO appDAO) {
														/*
														// create the instructor
														Instructor tempInstructor =
																new Instructor("Chad", "Darby", "darby@luv2code.com");
														// create the instructor detail
														InstructorDetail tempInstructorDetail =
																new InstructorDetail(
																		"http://www.luv2code.com/youtube",
																		"Luv 2 code!!!");
														*/
														// create the instructor
														Instructor tempInstructor =
																new Instructor("Madhu", "Patel", "madhu@luv2code.com");
														// create the instructor detail
														InstructorDetail tempInstructorDetail =
																new InstructorDetail(
																		"http://www.luv2code.com/youtube",
																		"Guitar");
														// associate the objects
														tempInstructor.setInstructorDetail(tempInstructorDetail);
														// save the instructor
														//
														// NOTE: this will ALSO save the details object
														// because of CascadeType.ALL
														//
														System.out.println("Saving instructor: " + tempInstructor);
														appDAO.save(tempInstructor);
														System.out.println("Done!");
													}
												}
	
	@OneToOne - Cascade Types:					
												By default, no operations are cascaded.
	
												PERSIST									If entity is persisted / saved, related entity will also be persisted
												REMOVE									If entity is removed / deleted, related entity will also be deleted
												REFRESH									If entity is refreshed, related entity will also be refreshed
												DETACH									If entity is detached (not associated w/ session), then related entity will also be detached
												MERGE									If entity is merged, then related entity will also be merged
												ALL										All of above cascade types
												
												@OneToOne(cascade={CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH, CascadeType.REMOVE})
												

	Unidirectional (@OneToOne uni):
												@Entity
												public class User {
													// ...
													@OneToOne
													@JoinColumn(name = "address_id")
													private Address address;
													// ...
												}
	One-to-One: Find an entity:
												@Repository
												public class AppDAOImpl implements AppDAO {
													…
													@Override
													public Instructor findInstructorById(int theId) {
														return entityManager.find(Instructor.class, theId);
													}
												}
	One-to-One: Delete an entity:
												@Repository
												public class AppDAOImpl implements AppDAO {
												…
													@Override
													@Transactional
													public void deleteInstructorById(int theId) {														
														Instructor tempInstructor = entityManager.find(Instructor.class, theId); // retrieve the instructor																									
														entityManager.remove(tempInstructor); // delete the instructor
													}
												}
	Bidirectional (@OneToOne bi):
												@Entity
												public class User {
													// ...
													@OneToOne(mappedBy = "user")
													private Address address;
													// ...
												}

												@Entity
												public class Address {
													@OneToOne
													@JoinColumn(name = "user_id")
													private User user;
													// ...
												}