Axios---:
							Axios là một thư viện HTTP Client dựa trên Promise. Cơ bản thì nó cung cấp một API cho việc xử lý XHR (XMLHttpRequests).
							Một trong những đặc điểm lớn ta có thể thấy đó là cách mà 2 thư viện xử lý với các HTTP error code. Khi sử dụng Fetch, nếu khi server trả về các mã lỗi 4xx hay 5xx, thì hàm
							catch() của bạn sẽ không được gọi đến và người lập trình viên sẽ có nhiệm vụ phải tự kiểm tra trạng thái của mã trả về để xác định xem liệu request đó có thành công hay không.
							Trong khi đó, Axios sẽ reject tất cả các promise của request nếu một trong các mã lỗi trên được trả về.
	Response Object:
							Khi một request được thực hiện thành công, thì hàm then() của bạn sẽ nhận được một response object với các thuộc tính như sau:
								data: 			Payload được trả về từ server. Mặc định, Axios mong chờ JSON và sẽ parse nó trở thành một Javascript Object cho bạn.
								status: 		mã HTTP được trả về từ server.
								statusText: 	message của HTTP status được trả về bởi server.
								headers: 		tất cả các header được gửi về từ server.
								config: 		thiết lập ban đầu của request.
								request: 		một object XMLHttpRequest thực khi request được thực hiện ở trình duyệt.
	Error Object:
							Nếu có bất kỳ vấn đề gì xảy ra với request, promise sẽ bị reject với một error object chứa những thuộc tính sau đây:
								message: 		message của error ở dạng text.
								response: 		response object được trả về.
								config: 		thiết lập ban đầu của request.
								request: 		một object XMLHttpRequest thực khi request được thực hiện ở trình duyệt.
	Dữ liệu trả về cho một request sẽ mang các thông tin sau:
							{																	  
							  data: {}, // `data` là dữ liệu trả về được cung cấp bởi server
							  status: 200, // `status` là mã HTTP status trả về từ server
							  statusText: 'OK', // `statusText` là thông điệp HTTP status trả về từ server
							  headers: {}, // `headers` là các header mà server phản hồi. Các tên của header được viết thường toàn bộ
							  config: {}, // `config` là các cấu hình khi thực hiện request
							  request: {} // `request` là request thực hiện để nhận được response này
							}
	Bắt đầu xây dựng truy vấn với axios:
		Các alias cho việc tạo ra các request với phương thức tương ứng:
							// Khi sử dụng các alias này thì url, method, và data không phải cần phải chỉ định trong config nữa.
							axios.request(config)
							axios.get(url[, config])
							axios.delete(url[, config])
							axios.head(url[, config])
							axios.options(url[, config])
							axios.post(url[, data[, config]])
							axios.put(url[, data[, config]])
							axios.patch(url[, data[, config]])
	Xây dựng truy vấn với axios:
												
								const config = { // Định nghĩa cấu hình cho yêu cầu
								  method: 'get', // Phương thức HTTP, ở đây là GET
								  url: 'https://api.example.com/data', // URL mục tiêu
								  params: { // Các tham số yêu cầu (nếu có)
									id: 123,
									sortBy: 'name'
								  },
								  headers: { // Các tiêu đề yêu cầu (nếu có)
									'Authorization': 'Bearer token',
									'Content-Type': 'application/json'
								  },
								  timeout: 5000 // Thời gian chờ tối đa (ms)
								};												
								axios(config) // Gửi yêu cầu sử dụng cấu hình đã định nghĩa
								  .then(response => {
									console.log('Dữ liệu nhận được:', response.data);
								  })
								  .catch(error => {
									console.error('Lỗi khi gửi yêu cầu:', error);
								  });
								  
								const instance = axios.create({
								    baseURL: `${Constants.Api.BASE_URL}/author`
								});
								
								export const SigninRepository = {
								    signIn: async (employeeId, pass) => {
								        const body = {
								            id: employeeId,
								            password: pass
								        };
								        const config = {
								            headers: {
								                'Content-Type': "application/json",
								                'Access-Control-Allow-Origin': '*',
								            }
								        };
								        return instance.post(`/signin`, body, config)
								            .then(res => {
								                if (res.status === 200) {
								                    localStorage.setItem('JWT Token', res.data.token);
								                    localStorage.setItem('Token', res.data.token);
								
								                    let userList = [];
								                    userList.push(res.data.userInfo);
								                    localStorage.setItem('LoginUserInfo', JSON.stringify(res.data.userInfo));
								                    localStorage.setItem('userAuthData', JSON.stringify(userList));
								
								                    localStorage.setItem("sectionID", res.data.userInfo.id);
								                    localStorage.setItem("empNameStorage", res.data.userInfo.username);
								
								                    localStorage.setItem("AuthRole", JSON.stringify(res.data.userInfo.listRole));
								                    localStorage.setItem('Permissions', JSON.stringify(res.data.permissions));
								                    return res.data;
								                } else {
								                    return null;
								                }
								            })
								            .catch(error => {
								                console.log("error: ", error);
								                return null;
								            });
								    },
								};
		axios get:
								axios.get('/user?ID=12345')
									.then(function (response) {
										onsole.log(response);
									})
									.catch(function (error) {
										onsole.log(error);
									});

								axios.get('/user', {
								  params: {
									ID: 12345
								  }
								})
								.then(function (response) {
								  console.log(response);
								})
								.catch(function (error) {
								  console.log(error);
								});
		axios post:
								axios.post('/users', {
								  firstName: 'First name',
								  lastName: 'Last name'
								})
								.then(function (response) {
								  console.log(response);
								})
								.catch(function (error) {
								  console.log(error);
								});
								
								const data = {
								  username: 'exampleUser',
								  password: 'examplePassword'
								};

								axios.post('https://api.example.com/login', data)
								  .then(response => {
									console.log('Kết quả:', response.data);
								  })
								  .catch(error => {
									console.error('Lỗi:', error);
								  });
								  
								const axios = require('axios');
								const FormData = require('form-data');
								const fs = require('fs');
								const formData = new FormData();
								formData.append('file', fs.createReadStream('path/to/file.txt'));
								axios.post('https://api.example.com/upload', formData, {
								  headers: {
									...formData.getHeaders()
								  }
								})
								.then(response => {
								  console.log('Kết quả:', response.data);
								})
								.catch(error => {
								  console.error('Lỗi:', error);
								});
		axios put:
								const newData = {
								  name: 'Updated Name',
								  description: 'Updated Description'
								};											
								const itemId = 123; // ID của mục cần cập nhật											
								const apiUrl = `https://api.example.com/items/${itemId}`; // URL đích												
								axios.put(apiUrl, newData) // Gửi yêu cầu PUT
								  .then(response => {
									console.log('Kết quả:', response.data);
								  })
								  .catch(error => {
									console.error('Lỗi:', error);
								  });
		axios delete:
								const itemId = 123;
								const apiUrl = `https://api.example.com/items/${itemId}`; // URL đích
								axios.delete(apiUrl) // Gửi yêu cầu DELETE
								  .then(response => {
									console.log('Mục đã được xóa thành công');
								  })
								  .catch(error => {
									console.error('Lỗi khi xóa mục:', error);
								  });
		axios create:
								const instance = axios.create({
									baseURL: process.env.REACT_APP_BASE_URL,
									headers: {
										'Content-Type': "application/json",
										'Access-Control-Allow-Origin': '*',
									}
								});
		Thực hiện nhiều truy cập đồng thời:										
												function getUserAccount() {
												  return axios.get('/user/12345');
												}

												function getUserPermissions() {
												  return axios.get('/user/12345/permissions');
												}

												axios.all([getUserAccount(), getUserPermissions()])
												.then(axios.spread(function (acct, perms) {
												  // Tất cả request đều đã được thực hiện xong
												}));
	Tạo ra một đối tượng axios với các config của mình bằng hàm axios.create([config]):
																								var instance = axios.create({
																								  baseURL: 'https://some-domain.com/api/',
																								  timeout: 1000,
																								  headers: {'X-Custom-Header': 'foobar'}
																								});
		Khi đó, đối tượng này có thể sử dụng các phương thức sau để thực hiện việc gửi request:
																										axios#request(config)
																										axios#get(url[, config])
																										axios#delete(url[, config])
																										axios#head(url[, config])
																										axios#options(url[, config])
																										axios#post(url[, data[, config]])
																										axios#put(url[, data[, config]])
																										axios#patch(url[, data[, config]])
	Ví dụ:
						import axios from 'axios';
						// Tạo một request bằng Axios
						axios.get('https://api.example.com/data')
						  .then(response => {
							// Xử lý response thành công
							console.log('Response thành công:', response.data);
						  })
						  .catch(error => {
							// Xử lý lỗi khi request thất bại
							if (error.response) {
							  // Request đã được gửi đi và nhận được response có status code không phải 2xx
							  console.log('Response lỗi:', error.response.data);
							  console.log('Status code:', error.response.status);
							} else if (error.request) {
							  // Request đã được gửi đi nhưng không nhận được response (ví dụ: mất kết nối)
							  console.log('Không nhận được response:', error.request);
							} else {
							  // Có lỗi xảy ra trong quá trình thiết lập request
							  console.log('Lỗi:', error.message);
							}
						  });						