Kiểu dữ liệu--MYSQL:
	String Data Types:
		CHAR(size):	
		
					A FIXED length string (can contain letters, numbers, and special characters). The size parameter
					specifies the column length in characters - can be from 0 to 255. Default is 1

					CREATE TABLE example_char (
						id INT AUTO_INCREMENT PRIMARY KEY,
						product_code CHAR(10)
					);
					INSERT INTO example_char (product_code) VALUES ('SKU123456'), ('SKU987654');
		
		VARCHAR(size):	
		
					A VARIABLE length string (can contain letters, numbers, and special characters). The size
					parameter specifies the maximum column length in characters - can be from 0 to 65535
					
					CREATE TABLE example_varchar (
						id INT AUTO_INCREMENT PRIMARY KEY,
						email VARCHAR(255)
					);
					INSERT INTO example_varchar (email) VALUES ('user@example.com'), ('info@example.com');
		
		BINARY(size):	
		
											Equal to CHAR(), but stores binary byte strings. The size parameter specifies the column length in bytes. Default is 1
											
											CREATE TABLE example_binary (
												id INT AUTO_INCREMENT PRIMARY KEY,
												hash BINARY(32)
											);
											INSERT INTO example_binary (hash) VALUES (UNHEX('1a2b3c4d...')), (UNHEX('5e6f7g8h...'));
		VARBINARY(size):
		
											Equal to VARCHAR(), but stores binary byte strings. The size parameter specifies the maximum column length in bytes.
											
											CREATE TABLE example_varbinary (
												id INT AUTO_INCREMENT PRIMARY KEY,
												image VARBINARY(1000000)
											);
											INSERT INTO example_varbinary (image) VALUES (LOAD_FILE('/path/to/image1.jpg')), (LOAD_FILE('/path/to/image2.jpg'));
		TINYBLOB:							
											For BLOBs (Binary Large OBjects). Max length: 255 bytes
											
											CREATE TABLE example_tinyblob (
												id INT AUTO_INCREMENT PRIMARY KEY,
												data TINYBLOB
											);
											INSERT INTO example_tinyblob (data) VALUES ('Some short text'), ('Another short text');
		TINYTEXT:							
											Holds a string with a maximum length of 255 characters
											
											CREATE TABLE example_tinytext (
												id INT AUTO_INCREMENT PRIMARY KEY,
												text TINYTEXT
											);
											INSERT INTO example_tinytext (text) VALUES ('Some short text'), ('Another short text');
		TEXT(size):							
											Holds a string with a maximum length of 65,535 bytes
											
											CREATE TABLE example_text (
												id INT AUTO_INCREMENT PRIMARY KEY,
												message TEXT(5000)
											);
											INSERT INTO example_text (message) VALUES ('Long text message 1'), ('Long text message 2');
		BLOB(size):							
											For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data
											
											CREATE TABLE example_blob (
												id INT AUTO_INCREMENT PRIMARY KEY,
												binary_data BLOB(100000)
											);
											INSERT INTO example_blob (binary_data) VALUES (LOAD_FILE('/path/to/file1')), (LOAD_FILE('/path/to/file2'));
		MEDIUMTEXT:							
											Holds a string with a maximum length of 16,777,215 characters
											
											CREATE TABLE example_mediumtext (
												id INT AUTO_INCREMENT PRIMARY KEY,
												medium_text MEDIUMTEXT
											);
											INSERT INTO example_mediumtext (medium_text) VALUES ('Medium text message 1'), ('Medium text message 2');
		MEDIUMBLOB:							
											For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data
											
											CREATE TABLE example_mediumblob (
												id INT AUTO_INCREMENT PRIMARY KEY,
												medium_binary MEDIUMBLOB
											);
											INSERT INTO example_mediumblob (medium_binary) VALUES (LOAD_FILE('/path/to/file1')), (LOAD_FILE('/path/to/file2'));
		LONGTEXT:							
											Holds a string with a maximum length of 4,294,967,295 characters
											
											CREATE TABLE example_longtext (
												id INT AUTO_INCREMENT PRIMARY KEY,
												long_text LONGTEXT
											);
											INSERT INTO example_longtext (long_text) VALUES ('Long text message 1'), ('Long text message 2');
		LONGBLOB:							
											For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data
											
											CREATE TABLE example_longblob (
												id INT AUTO_INCREMENT PRIMARY KEY,
												long_blob_data LONGBLOB
											);
											INSERT INTO example_longblob (long_blob_data) VALUES (LOAD_FILE('/path/to/large_file1')), (LOAD_FILE('/path/to/large_file2'));
		ENUM(val1, val2, val3, ...):		
											A string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list,
											a blank value will be inserted. The values are sorted in the order you enter them
											
											CREATE TABLE example_enum (
												id INT AUTO_INCREMENT PRIMARY KEY,
												status ENUM('active', 'inactive', 'pending')
											);
											INSERT INTO example_enum (status) VALUES ('active'), ('inactive'), ('pending');
		SET(val1, val2, val3, ...):			
											A string object that can have 0 or more values, chosen from a list of possible values. You can list up to 64 values in a SET list
											
											CREATE TABLE example_set (
												id INT AUTO_INCREMENT PRIMARY KEY,
												options SET('option1', 'option2', 'option3', 'option4')
											);
											INSERT INTO example_set (options) VALUES ('option1,option2'), ('option2,option3'), ('option1,option3,option4');
	Numeric Data Types:
		BIT(size):							
											A bit-value type. The number of bits per value is specified in size. The size parameter can hold a value from 1 to 64. The default value for size is 1.
											
											CREATE TABLE example_bit (
												id INT AUTO_INCREMENT PRIMARY KEY,
												bit_data BIT(8)
											);
											INSERT INTO example_bit (bit_data) VALUES (B'10101010'), (B'11110000');
		TINYINT(size):						
											A very small integer. Signed range is from -128 to 127. Unsigned range is from 0 to 255. The size parameter specifies the maximum display width (which is 255)
											
											CREATE TABLE example_tinyint (
												id INT AUTO_INCREMENT PRIMARY KEY,
												tinyint_data TINYINT(4)
											);
											INSERT INTO example_tinyint (tinyint_data) VALUES (10), (-5);
		BOOL/BOOLEAN:								
											Zero is considered as false, nonzero values are considered as true.
											
											CREATE TABLE example_boolean (
												id INT AUTO_INCREMENT PRIMARY KEY,
												is_active BOOLEAN
											);
											INSERT INTO example_boolean (is_active) VALUES (TRUE), (FALSE);
		SMALLINT(size):						
											A small integer. Signed range is from -32768 to 32767. Unsigned range is from 0 to 65535. The size parameter specifies the maximum display width (which is 255)
											
											CREATE TABLE example_smallint (
												id INT AUTO_INCREMENT PRIMARY KEY,
												smallint_data SMALLINT(6)
											);
											INSERT INTO example_smallint (smallint_data) VALUES (100), (-50);
		MEDIUMINT(size):					
											A medium integer. Signed range is from -8388608 to 8388607. Unsigned range is from 0 to 16777215. The size parameter specifies the maximum display width (which is 255)
											
											CREATE TABLE example_mediumint (
												id INT AUTO_INCREMENT PRIMARY KEY,
												mediumint_data MEDIUMINT(9)
											);
											INSERT INTO example_mediumint (mediumint_data) VALUES (100000), (-50000);
		INT(size)/INTEGER(size):							
											A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)
											
											CREATE TABLE example_integer (
												id INT AUTO_INCREMENT PRIMARY KEY,
												int_data INT(11)
											);
											INSERT INTO example_integer (int_data) VALUES (1000000), (-500000);
		BIGINT(size):						
											A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The size parameter specifies the maximum display width
											(which is 255)
											
											CREATE TABLE example_bigint (
												id INT AUTO_INCREMENT PRIMARY KEY,
												bigint_data BIGINT(20)
											);
											INSERT INTO example_bigint (bigint_data) VALUES (1000000000), (-500000000);
		FLOAT(size, d):						
											A floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. This syntax is deprecated
											in MySQL 8.0.17, and it will be removed in future MySQL versions
											
											CREATE TABLE example_float (
												id INT AUTO_INCREMENT PRIMARY KEY,
												float_data FLOAT(8, 2)
											);
											INSERT INTO example_float (float_data) VALUES (1234.56), (-789.01);
		DOUBLE(size, d):					
											A normal-size floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter
											
											CREATE TABLE example_double (
												id INT AUTO_INCREMENT PRIMARY KEY,
												double_data DOUBLE(16, 4)
											);
											INSERT INTO example_double (double_data) VALUES (123456.789), (-987654.321);
		DECIMAL(size, d)/DEC(size, d):					
											An exact fixed-point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. The maximum number for
											size is 65. The maximum number for d is 30. The default value for size is 10. The default value for d is 0.
											
											CREATE TABLE example_decimal (
												id INT AUTO_INCREMENT PRIMARY KEY,
												decimal_data DECIMAL(10, 5)
											);
											INSERT INTO example_decimal (decimal_data) VALUES (123.456), (-789.012);
	Date and Time Data Types:
		DATE:								
											Format: YYYY-MM-DD.
											A date. The supported range is from '1000-01-01' to '9999-12-31'
											
											CREATE TABLE example_date (
												id INT AUTO_INCREMENT PRIMARY KEY,
												date_data DATE
											);
											INSERT INTO example_date (date_data) VALUES ('2024-02-29'), ('2024-12-25');
		DATETIME(fsp):						
											Format: YYYY-MM-DD hh:mm:ss. 
											A date and time combination. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column
											definition to get automatic initialization and updating to the current date and time
											
											CREATE TABLE example_datetime (
												id INT AUTO_INCREMENT PRIMARY KEY,
												datetime_data DATETIME(3)
											);
											INSERT INTO example_datetime (datetime_data) VALUES ('2024-02-29 12:34:56.789'), ('2024-12-25 09:00:00.000');
		TIMESTAMP(fsp):						
											Format: YYYY-MM-DD hh:mm:ss. 
											A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). The supported range is from
											'1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. Automatic initialization and updating to the current date and time can be specified using DEFAULT CURRENT_TIMESTAMP and
											ON UPDATE CURRENT_TIMESTAMP in the column definition
											
											CREATE TABLE example_timestamp (
												id INT AUTO_INCREMENT PRIMARY KEY,
												timestamp_data TIMESTAMP(6)
											);
											INSERT INTO example_timestamp (timestamp_data) VALUES ('2024-02-29 12:34:56.789'), ('2024-12-25 09:00:00.000');
		TIME(fsp):							
											Format: hh:mm:ss.
											A time. The supported range is from '-838:59:59' to '838:59:59'
											
											CREATE TABLE example_time (
												id INT AUTO_INCREMENT PRIMARY KEY,
												time_data TIME(2)
											);
											INSERT INTO example_time (time_data) VALUES ('12:34:56.78'), ('09:00:00.00');
		YEAR:								
											format: 1901 to 2155, and 0000.
											A year in four-digit format. Values allowed in four-digit. MySQL 8.0 does not support year in two-digit format.
											
											CREATE TABLE example_year (
												id INT AUTO_INCREMENT PRIMARY KEY,
												year_data YEAR
											);
											INSERT INTO example_year (year_data) VALUES (2024), (2025);