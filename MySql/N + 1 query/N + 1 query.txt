N + 1 query--MySQL:

	N + 1 query là gì ?
		
		Câu chuyện xảy ra khi chúng ta, những coder viết code chưa khéo, sinh ra nhiều truy vấn vào cơ sở dữ liệu làm
		giảm performance của hệ thống. Khi đồng nghiệp đọc code thường thì sẽ bình luận ngay: fix N + 1
	
	Ví dụ về N + 1
	
		Mình viết ví dụ tựa như mã giả thui nhé, không đặt nặng vấn đề cú pháp
		
		Giả sử ta có một cơ sở dữ liệu, trong đó table post có khóa ngoại user_id, nói theo kiểu mã giả là một post thuộc về một user
		
		Thực hiện truy vấn vào cơ sở dữ liệu và lấy tất cả User kèm theo các Post của User đó:
			
			User.all.each do |user|
			  user.posts
			end
		
		Các câu lệnh SQL sinh ra như sau
			  
			  User Load (0.2ms)  SELECT "users".* FROM "users"
	  
			  Post Load (0.1ms)  SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = ?  [["user_id", 1]]
			  Post Load (0.1ms)  SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = ?  [["user_id", 2]]
			  Post Load (0.1ms)  SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = ?  [["user_id", 3]]
			
			Mình cần dùng 4 câu truy vấn:
				
				Một truy vấn để lấy ra tất cả users => đây chính là 1 trong "N+1"
				
				Ba truy vấn để lấy ra các post tương ứng với ba user trong cơ sở dữ liệu => đây chính là N trong "N+1"
			
			Đối với những hệ thống có số lượng bản ghi lớn (cỡ như phải trả về 1000 user thì chúng ta phải thực hiện 1001 truy vấn)
			hoặc có database với độ trễ cao (thời gian thực thi truy vấn cao) thì ắt hẳn sẽ làm giảm performance của hệ thống.
			
			Vậy làm sao để có thể lấy ra dữ liệu tương đương như vậy nhưng với số lượng truy vấn bé hơn ?
	
	Cách khắc phục
		
		Sử dụng select in ()
			
			Tối ưu câu lệnh SQL ngay và luôn.
				
				User Load (0.2ms)  SELECT "users".* FROM "users"
				Post Load (0.4ms)  SELECT "posts".* FROM "posts" WHERE "posts"."user_id" IN (1, 2, 3)
			
			Chúng ta cần 2 truy vấn:
			
				Truy vấn đầu tiên để load toàn bộ user
				
				Truy vấn thứ 2 để load các post tương ứng với những users đó.
		
		Sử dụng joins
			
			Joins là gì ?
				
				Mệnh đề joins trong SQL được sử dụng để kết hợp các bản ghi từ hai hoặc nhiều bảng trong một cơ sở
				dữ liệu bằng cách sử dụng các giá trị chung của mỗi bảng.
			
			Ta có một ví dụ như này:
				
				Bảng User:
				Bảng Post:
				Trong ví dụ trên bạn có thể dùng joins để tạo ra bảng mới chứa tên, email của user và những tên bài
				đăng mà user đó tạo ra.
					
					SELECT User.name, User.email, Post.title
					FROM User
					INNER JOIN Post ON User.id = Post.user_id

				Như vậy, joins sẽ tem tém hai bảng lại rồi truy vấn trên kết quả đó nên joins chỉ tốn một query duy nhất đã cho ra kết quả.
		
		Lựa chọn cái nào
			
			Hãy so sánh truy vấn do joinsvà select in() tạo ra, bạn sẽ nhận thấy ngay select in() đơn giản, dễ
			hiểu và ngắn gọn hơn joins rất nhiều.
			
			Trong trường hợp hai bảng cần joins có số lượng record lớn thì select in() sẽ vượt trội hơn hẳn.
			
			Thế tại sao còn sinh ra joins trong khi select in() đã ngon, bổ, rẻ.
			
			Vậy thì hãy xem 3 ví dụ sau:
				
				Không có điều kiện where
					
					# Mọi thứ bình yên vô sự
					2.3.1 :092 > User.all.includes(:posts)
					  User Load (0.2ms)  SELECT "users".* FROM "users"
					  Post Load (0.4ms)  SELECT "posts".* FROM "posts" WHERE "posts"."user_id" IN (1, 2, 3)
				
				Có thêm điều kiện where trong bảng bên trái (Tức là bảng User)
					
					# Lỗi rồi, ahihi
					2.3.1 :099 > User.all.includes(:posts).where("posts.title  = ?" , "Hoa")
					  User Load (0.6ms)  SELECT "users".* FROM "users" WHERE (posts.title  = 'Hoa')
					ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: posts.title: SELECT "users".* FROM "users" WHERE (posts.title  = 'Hoa')
				
				Có thêm điều kiện where trong bảng bên phải (Tức là bảng Post)
					
					# Lỗi rồi, ahihi
					2.3.1 :099 > User.all.includes(:posts).where("posts.title  = ?" , "Hoa")
					  User Load (0.6ms)  SELECT "users".* FROM "users" WHERE (posts.title  = 'Hoa')
					ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: posts.title: SELECT "users".* FROM "users" WHERE (posts.title  = 'Hoa')
				
				Lý do lỗi ở đây là gì ? Tại sao where với bảng bên trái thì không gặp lỗi mà bảng bên phải lại gặp lỗi no such column
				
				Bởi vì select in() sẽ không load trước được dữ liệu từ bảng post, nên nó không hiểu trường title là gì.
				
				Còn trường name nằm ngay trong table user rồi nên không gặp lỗi.
				
				Khi where với bảng bên phải thì đây là đất để joins dụng võ rồi, vì hai bảng được kết hợp với nhau nên luôn
				có đầy đủ thông tin các trường của mỗi bảng.
					# Query succeeded rồi, ahihi.
					User.all.includes(:posts).references(:posts).where("posts.title  = ?" , "Hoa")
					  SQL (0.6ms)  SELECT "users"."id" AS t0_r0, "users"."name" AS t0_r1, "users"."created_at" AS t0_r2, "users"."updated_at" AS t0_r3, "users"."post_id" AS t0_r4, "posts"."id" AS t1_r0, "posts"."title"
					  AS t1_r1, "posts"."created_at" AS t1_r2, "posts"."updated_at" AS t1_r3, "posts"."user_id" AS t1_r4 FROM "users" LEFT OUTER JOIN "posts" ON "posts"."user_id" = "users"."id" WHERE (posts.title  = 'Hoa')
				
				Các bạn đừng quá quan tâm includes và references là gì, cứ hiểu mình dùng nó để ép kiểu truy vấn thành select in() hoặc joins là được. Phần sau mình sẽ giải thích kĩ hơn.
				
				Vậy trong trường hợp có điều kiện where ở bảng bên phải thì phải sài joins nhé, còn ngược lại thì cứ sài select in() cho ngon, bổ, rẻ.
	
	Tính năng hay bug
		
		Từ đầu tới giờ ta tìm hiểu thì có vẻ như N + 1 là điều không tốt cho performance của chương trình.
		
		Nhưng chưa hẳn, hãy xem xét ví dụ sau:
			
			Bạn truy cập vào trang chủ của website bán hàng, có tính năng phân trang nên chỉ load ra 20 sản phẩm đầu
			tiên (có kèm theo nơi sản xuất ở Hà Nội)
			
			Dễ thấy rằng ở đây dễ xuất hiện N + 1 query:
				1 truy vấn đầu tiên để lấy ra 20 sản phẩm từ bảng Product.
				20 truy vấn tiếp theo lấy ra nơi sản xuất của 20 sản phẩm đó tư bảng Company.
			
			Có thêm điều kiện where("company.product.id = ?", "Hà Nội") ở bảng bên phải
			
			Vậy chúng ta cần 20 + 1 = 21 truy vấn và chúng ta sử dụng joins để khử N + 1.
			
			Trong trường hợp đối với một cơ sở dữ liệu khủng, với hàng triệu record cho mỗi bảng thì việc joins hai bảng khủng
			như vậy sẽ tiêu tốn tài nguyên hơn 21 câu truy vấn ngắn rất nhiều lần.
			
			Bản chất của joins là sẽ duyệt qua từng bản ghi của bảng thứ nhất, đối chiếu với từng bản ghi của bảng thứ 2, nếu điều
			kiện được thỏa mãn thì kết hợp thành một hàng, duyệt 2 vòng lặp, tiêu tốn nhiều thời gian và tài nguyên.