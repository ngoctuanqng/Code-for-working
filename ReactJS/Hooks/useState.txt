useState--REACTJS:
		- The set function only updates the state variable for the next render. If you read the state variable after calling the set function, you will still get the old value
		that was on the screen before your call.
		- If the new value you provide is identical to the current state, as determined by an Object.is comparison, React will skip re-rendering the component and its
		children. This is an optimization. Although in some cases React may still need to call your component before skipping the children, it shouldn’t affect your code.
		- React batches state updates. It updates the screen after all the event handlers have run and have called their set functions. This prevents multiple re-renders
		during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use flushSync.
		- Calling the set function during rendering is only allowed from within the currently rendering component. React will discard its output and immediately attempt to
		render it again with the new state. This pattern is rarely needed, but you can use it to store information from the previous renders.
		- Trong quá trình phát triển ứng dụng React, React có thể gọi các "updaters" (các hàm cập nhật) của bạn hai lần để kiểm tra xem chúng có đủ "pure" không. Trong ngữ cảnh của React, một hàm được
		coi là "pure" nếu nó không gây ra các hiệu ứng phụ (side effects) và trả về kết quả dựa trên đầu vào của nó mà không thay đổi trạng thái của ứng dụng. Điều này giúp đảm bảo rằng việc gọi các hàm
		cập nhật sẽ không gây ra sự thay đổi không mong muốn đối với trạng thái của ứng dụng.
		- If you do multiple updates within the same event, updaters can be helpful
		- If you pass a function as initialState, it will be treated as an initializer function. It should be pure, should take no arguments, and should return a value of any
		type. React will call your initializer function when initializing the component, and store its return value as the initial state.
		- The set function returned by useState lets you update the state to a different value and trigger a re-render.

		const [name, setName] = useState('Edward'); // Edward là giá trị khởi tạo cho state. This argument is ignored after the initial render.
		function handleClick() {
			setName('Taylor');
		// ...
		}
		
		const increment = () => {
			setCount(count + 1); // Đây là updaters
		};
							
	Updating state based on the previous state--useState:
	
		function handleClick() {
		  setAge(age + 1); // setAge(42 + 1)
		  setAge(age + 1); // setAge(42 + 1)
		  setAge(age + 1); // setAge(42 + 1) // setState chi có thể update giá trị cho next state => state trong đoạn code hiện tại chắc chắn sẽ không bị ảnh hưởng
		}
		
		function handleClick() {
		  setAge(a => a + 1); // setAge(42 => 43)
		  setAge(a => a + 1); // setAge(43 => 44)
		  setAge(a => a + 1); // setAge(44 => 45) // a => a + 1 is your updater function. It takes the pending state and calculates the next state from it.
		}
		
		import { useState } from 'react';
		export default function Counter() {
		  const [age, setAge] = useState(42);
		  function increment() {
			setAge(a => a + 1);
		  }
		  return (
			<>
			  <h1>Your age: {age}</h1>
			  <button onClick={() => {
				increment();
				increment();
				increment();
			  }}>+3</button> // “+3” button works. Update state theo giá trị của pending state
			  <button onClick={() => {
				increment();
			  }}>+1</button>
			</>
		  );
		}
		import { useState } from 'react';
		export default function Counter() {
		  const [age, setAge] = useState(42);
		  function increment() {
			setAge(age + 1);
		  }
		  return (
			<>
			  <h1>Your age: {age}</h1>
			  <button onClick={() => {
				increment();
				increment();
				increment();
			  }}>+3</button> // “+3” button doesn’t work as intended. Không update state theo giá trị của pending state
			  <button onClick={() => {
				increment();
			  }}>+1</button>
			</>
		  );
		}
		
		const [age, setAge] = useState(42);
		setAge(age => age + 1); // 42 + 1
		setAge(age + 1); // 42. Giá trị của age không thay đổi trực tiếp khi bạn gọi setAge với một giá trị mới. Không updat dựa theo state pending mà lại theo state hiện tại
		setAge(age => age + 1); // 42 + 1
		
	Updating objects and arrays in state--useState:
	
		Update Object:
		
		  const [form, setForm] = useState({
			firstName: 'Barbara',
			lastName: 'Hepworth',
			email: 'bhepworth@sculpture.com',
		  });
		  onChange={e => {
			setForm({
			  ...form,
			  firstName: e.target.value
			});
		  }}
		  
		  const [person, setPerson] = useState({
			name: 'Niki de Saint Phalle',
			artwork: {
			  title: 'Blue Nana',
			  city: 'Hamburg',
			  image: 'https://i.imgur.com/Sd1AgUOm.jpg',
			}
		  });
		  function handleTitleChange(e) {
			setPerson({
			  ...person,
			  artwork: {
				...person.artwork,
				title: e.target.value
			  }
			});
		  }
		  
		Update Array:		
		
			  let nextId = 3;
				const initialTodos = [
				  { id: 0, title: 'Buy milk', done: true },
				  { id: 1, title: 'Eat tacos', done: false },
				  { id: 2, title: 'Brew tea', done: false },
			  ];
			  const [todos, setTodos] = useState(initialTodos);
			  function handleAddTodo(title) {
				setTodos([
				  ...todos,
				  {
					id: nextId++,
					title: title,
					done: false
				  }
				]);
			  }
			  function handleChangeTodo(nextTodo) {
				setTodos(todos.map(t => {
				  if (t.id === nextTodo.id) {
					return nextTodo;
				  } else {
					return t;
				  }
				}));
			  }
			  function handleDeleteTodo(todoId) {
				setTodos(
				  todos.filter(t => t.id !== todoId)
				);
			  }
			  
	Avoiding recreating the initial state--useState:
			
			  React saves the initial state once and ignores it on the next renders.
			  function TodoList() {
				  const [todos, setTodos] = useState(createInitialTodos());
				  // ...
			  }
			  
			  To solve this, you may pass it as an initializer function to useState instead:
			  function TodoList() {
				  const [todos, setTodos] = useState(createInitialTodos); // React will only call it during initialization. 
				  // ...
			  }
			  
			  React may call your initializers twice in development to verify that they are pure.
														  
	Storing information from previous renders--useState:
	
				  import { useState } from 'react';
				  import CountLabel from './CountLabel.js';
				  
				  export default function App() {
				    const [count, setCount] = useState(0);
				    return (
				  	<>
				  	  <button onClick={() => setCount(count + 1)}>
				  		Increment
				  	  </button>
				  	  <button onClick={() => setCount(count - 1)}>
				  		Decrement
				  	  </button>
				  	  <CountLabel count={count} />
				  	</>
				    );
				  }
				  import { useState } from 'react';
				  export default function CountLabel({ count }) {
				    const [prevCount, setPrevCount] = useState(count);
				    const [trend, setTrend] = useState(null);
				    if (prevCount !== count) {
						setPrevCount(count);
						setTrend(count > prevCount ? 'increasing' : 'decreasing');
				    }
				    return (
				  	<>
				  	  <h1>{count}</h1>
				  	  {trend && <p>The count is {trend}</p>}
				  	</>
				    );
				  }
														  
	I’ve updated the state, but logging gives me the old value--useState:
	
					function handleClick() {
					  console.log(count);  // 0
					  setCount(count + 1); // Request a re-render with 1
					  console.log(count);  // Still 0!
					  setTimeout(() => {
						console.log(count); // Also 0!
					  }, 5000);
					}
														
		If you need to use the next state, you can save it in a variable before passing it to the set function--useState:
		
					const nextCount = count + 1;
					setCount(nextCount);
					console.log(count);     // 0
					console.log(nextCount); // 1
	
	I’m getting an error: “Too many re-renders”--useState:
	
					- Your component enters a loop: render, set state (which causes a render), render, set state (which causes a render), and so on.
					- Khi bạn truyền hàm dưới dạng handleClick (ví dụ: onClick={handleClick}), bạn chỉ truyền tham chiếu đến hàm. Điều này có nghĩa là hàm không được gọi ngay lập tức
					trong quá trình render. Thay vào đó, hàm sẽ được gọi chỉ khi sự kiện (ví dụ: người dùng nhấp chuột) xảy ra.
					- Khi bạn truyền hàm dưới dạng handleClick() (ví dụ: onClick={handleClick()}), bạn thực hiện một cuộc gọi hàm ngay trong quá trình render. Điều này có nghĩa là hàm sẽ
					được gọi mỗi khi thành phần được render lại, thay vì chỉ khi sự kiện xảy ra. Điều này có thể gây ra các vấn đề không mong muốn và làm cho hàm được gọi nhiều lần không
					cần thiết.																												
					
					return <button onClick={handleClick()}>Click me</button> //  Wrong: calls the handler during render												
					return <button onClick={handleClick}>Click me</button> // ✅ Correct: passes down the event handler													
					return <button onClick={(e) => handleClick(e)}>Click me</button> // ✅ Correct: passes down an inline function
					
					function MyComponent() {
					  const handleClick = () => {
						console.log('Button clicked!');
					  };
					  return <button onClick={handleClick()}>Click me</button>; // hàm handleClick sẽ được gọi ngay trong quá trình render, không chờ đến sự kiện xảy ra. Kết quả là, mỗi
																				// khi thành phần được render lại, hàm sẽ được gọi một lần, dẫn đến việc in ra "Button clicked!" nhiều lần
																				// không mong muốn.
					}
														
	My initializer or updater function runs twice--useState:	

					- In Strict Mode, React will call some of your functions twice instead of once
					- This development-only behavior helps you keep components pure. React uses the result of one of the calls, and ignores the result of the other call. As long as your
					component, initializer, and updater functions are pure, this shouldn’t affect your logic. However, if they are accidentally impure, this helps you notice the mistakes.
					- Because you’re passing a function, React assumes that someFunction is an initializer function, and that someOtherFunction is an updater function, so it tries to call
					them and store the result. To actually store a function, you have to put () => before them in both cases. Then React will store the functions you pass.
					
					function TodoList() { // This component function will run twice for every render.														  
					  const [todos, setTodos] = useState(() => {
						// This initializer function will run twice during initialization.
						return createTodos();
					  });
					  function handleClick() {
						setTodos(prevTodos => {
						  // This updater function will run twice for every click.
						  return [...prevTodos, createTodo()];
						});
					  }
					  // ...
					
					const [fn, setFn] = useState(someFunction); // You can’t put a function into state like this
					function handleClick() {
					  setFn(someOtherFunction); // You can’t put a function into state like this
					}
					
					const [fn, setFn] = useState(() => someFunction); // React will store the functions you pass
					function handleClick() {
					  setFn(() => someOtherFunction); // React will store the functions you pass
					}