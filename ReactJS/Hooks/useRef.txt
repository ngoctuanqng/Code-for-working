useRef--REACTJS:
			- useRef is a React Hook that lets you reference a value that’s not needed for rendering.
			- useRef hook là một function trả về một object với thuộc tính current được khởi tạo thông qua tham số truyền vào. Object được trả về này có thể mutate và sẽ tồn tại xuyên suốt vòng đời của
			component. Nó chủ yếu được sử dụng để truy cập một cách ngầm định một thành phần con.
			- Thuộc tính ref sẽ tham chiếu đến chính xác element cần dùng.
			- Giả dụ tình huống là thế này, bạn làm gì đó mà nó ko liên quan đến UI, không cần re-render, nhưng vẫn muốn giá trị này cố định giữa các lần render? useState có thể cố định giá trị,
			nhưng ngặt nỗi nó sẽ trigger re-render nếu bị thay đổi.
			
			import { useRef } from 'react';
			export default function Counter() {
			  let ref = useRef(0);
			  function handleClick() {
				ref.current = ref.current + 1;
				alert('You clicked ' + ref.current + ' times!');
			}
			return (
			  <button onClick={handleClick}>
				Click me!
			  </button>
			  );
			}
			
			
			import React, { useRef, useEffect } from 'react';
			function ExampleComponent() {
			  const myRef = useRef(null);
			  useEffect(() => {									
				myRef.current.focus(); // Gán thuộc tính focus cho element khi component được mount
			  }, []);
			  return (
				<div>
				  <input type="text" ref={myRef} /> //Sử dụng useRef để tạo ra một ref
				  <button onClick={() => myRef.current.focus()}>Focus Input</button>
				</div>
			  );
			}
			export default ExampleComponent;
			
			
			Trong useEffect với dependency array rỗng (đánh dấu quá trình initialization), việc ghi vào ref.current là an toàn, vì nó chỉ xảy ra một lần khi component được khởi tạo.
			Tuy nhiên, trong phần return của component, việc ghi vào ref.current trong JSX hoặc đọc ref.current trong hàm render không nên được thực hiện. Việc này có thể dẫn đến hành vi không đoán
			được hoặc các vấn đề khác nhau khi React tái render component. Thay vào đó, các thao tác này nên được thực hiện trong các hàm lifecycle hoặc useEffect hook.
			import React, { useRef, useEffect } from 'react';
			function ExampleComponent() {
			  const ref = useRef(null);							  
			  useEffect(() => {
				// Trong phần initialization, việc ghi vào ref.current là an toàn
				ref.current = 'Initialized';
			  }, []);
			  // Trong quá trình rendering, đọc hoặc ghi vào ref.current không nên được thực hiện
			  console.log(ref.current); // Không nên đọc trong quá trình rendering
			  return (
				<div ref={ref}>
				  {/* Ghi vào ref.current trong JSX cũng không được khuyến khích */}
				</div>
			  );
			}
	
	.current.contains trong useRef:
	
			Là một phương thức của một tham chiếu DOM (thông qua .current) và được sử dụng để kiểm tra xem một phần tử DOM có nằm trong phạm vi của một phần tử khác không. Phương thức này trả về giá trị boolean true nếu phần tử DOM
			được xem xét nằm trong phạm vi của phần tử khác, và false nếu không.
									
	Kiểm tra việc người dùng đã nhấp chuột bên ngoài phần tử:
									
			Kiểm tra xem phần tử hiện tại được tham chiếu bởi ref.current có chứa phần tử mà sự kiện mousedown xảy ra hay không (!ref.current.contains(e.target)). Nếu phần tử không chứa phần tử mà sự kiện xảy ra, tức là người dùng
			đã nhấp chuột bên ngoài phần tử
	
			if (ref.current && !ref.current.contains(e.target))