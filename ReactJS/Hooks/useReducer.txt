useReducer--REACTJS:

		- useReducer is a React Hook that lets you add a reducer to your component.
		- Thực tế khi sử dụng useState thì nó sẽ trả về 1 phiên bản đơn giản của useReducer, vậy nên chúng ta có thể coi useReducer như một phiên bản nâng cao hơn dùng để thay thế cho việc sử dụng
		useState.
		- Khi gọi dispatch(action), nó sẽ chạy qua reducer và truyền action cùng với trạng thái hiện tại vào hàm reducer. Sau đó, hàm reducer sẽ kiểm tra hành động và trả về một phiên bản mới
		của trạng thái dựa trên hành động đó.
		- Trong hàm reducer sẽ có biến state và biến action, biến action được lấy từ dispatch.
		- The dispatch function only updates the state variable for the next render. If you read the state variable after calling the dispatch function, you will still get the old value that was
		on the screen before your call.
		- If the new value you provide is identical to the current state, as determined by an Object.is comparison, React will skip re-rendering the component and its children. This is an
		optimization. React may still need to call your component before ignoring the result, but it shouldn’t affect your code.
		- React batches state updates. It updates the screen after all the event handlers have run and have called their set functions. This prevents multiple re-renders during a single event.
		In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use flushSync.

		// Define reducer function
		const reducer = (state, action) => {
		  switch (action.type) {
			case 'INCREMENT':
			  return { count: state.count + 1 };
			case 'DECREMENT':
			  return { count: state.count - 1 };
			case 'RESET':
			  return { count: 0 };
			default:
			  return state;
		  }
		};
		import React, { useReducer } from 'react';
		import reducer from './Reducer';
		// Component
		function Counter() {
		  // Sử dụng useReducer với reducer function và initialState
		  const [state, dispatch] = useReducer(reducer, { count: 0 });
		  // Handlers
		  const increment = () => dispatch({ type: 'INCREMENT' });
		  const decrement = () => dispatch({ type: 'DECREMENT' });
		  const reset = () => dispatch({ type: 'RESET' });
		  return (
			<div>
			  <p>Count: {state.count}</p>
			  <button onClick={increment}>Increment</button>
			  <button onClick={decrement}>Decrement</button>
			  <button onClick={reset}>Reset</button>
			</div>
		  );
		}
		export default Counter;