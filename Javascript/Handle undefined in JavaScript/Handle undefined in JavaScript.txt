Handle undefined in JavaScript--JAVASCRIPT:
	Accessing a non-existing property:		
														let favoriteMovie = {
															title: 'Blade Runner'
														};
														console.log(favoriteMovie.actors); // => undefined
		Check the property existence:		
														obj.prop !== undefined // compare against undefined directly
														typeof obj.prop !== 'undefined' // verify the property value type
														obj.hasOwnProperty('prop') // verify whether the object has its own property
														'prop' in obj // verify whether the object has an own or inherited property

		Destructuring to access object properties:		
														function quote(str, config) {
														  const { char = '"', skipIfQuoted = true } = config;
														  const length = str.length;
														  if (skipIfQuoted && str[0] === char && str[length - 1] === char) {
															return str;
														  }
														  return char + str + char;
														}
														const s1 = quote('Hello World', { char: '*' }); // '*Hello World*'    
														const s2 = quote('"Welcome"', { skipIfQuoted: true }); // '"Welcome"'

		Fill the object with default properties:
														const unsafeOptions = {
														  fontSize: 18
														};
														const defaults = {
														  fontSize: 16,
														  color: 'black'
														};
														const options = {
														  ...defaults,
														  ...unsafeOptions
														};
														console.log(options.fontSize); // => 18
														console.log(options.color);    // => 'black'
		Nullish coalescing:
														const styles = {
														  fontSize: 18
														};
														console.log(styles.color ?? 'black'); // => 'black'
														console.log(styles.fontSize ?? 16);   // => 18


	Uninitialized variable:
																	let myVariable;
																	console.log(myVariable); // => undefined
		Favor const, otherwise use let, but say goodbye to var:
																	function isPalindrome(word) {
																	  const length = word.length;
																	  const half = Math.floor(length / 2);
																	  for (let index = 0; index < half; index++) {
																		if (word[index] !== word[length - index - 1]) {
																		  return false;
																		}
																	  }
																	  return true;
																	}
																	console.log(isPalindrome('madam')); // => true
																	console.log(isPalindrome('hello')); // => false
		Increase cohesion:
																	function someFunc(array) {
																	  // some code...
																	  // some code...
																	  const length = array.length;
																	  for (let index = 0; index < length; index++) {
																		const item = array[index];
																		// some 
																	  }
																	  return 'some result';
																	}
	Function parameters:		
																	function multiply(a, b) {
																	  console.log(b); // => undefined
																	  return a * b;
																	}
																	console.log(multiply(5)); // => NaN
		Use default parameter value:
																	function multiply(a, b = 2) {
																	  return a * b;
																	}

																	console.log(multiply(5));            // => 10
																	console.log(multiply(5, undefined)); // => 10
	Function return value:
																	function square(x) {
																	  const res = x * x;
																	}
																	console.log(square(2)); // => undefined
		Don't trust the automatic semicolon insertion:
																	function getPrimeNumbers() {
																	  return [ 2, 3, 5, 7, 11, 13, 17 ]
																	}
																	console.log(getPrimeNumbers()) // => undefined
																	
																	function getPrimeNumbers() {
																	  return; 
																	  [ 2, 3, 5, 7, 11, 13, 17 ];
																	}
																	console.log(getPrimeNumbers()); // => undefined
																	
																	function getPrimeNumbers() {
																	  return [2, 3, 5, 7, 11, 13, 17];
																	}
																	console.log(getPrimeNumbers()); // => [2, 3, 5, 7, 11, 13, 17]
		void operator:
																	console.log(void 1);                    // => undefined
																	console.log(void (false));              // => undefined
																	console.log(void {name: 'John Smith'}); // => undefined
																	console.log(void Math.min(1, 3));       // => undefined
	undefined in arrays:
																	const colors = ['blue', 'white', 'red'];
																	console.log(colors[5]);  // => undefined
																	console.log(colors[-1]); // => undefined

																	const sparse1 = new Array(3);
																	console.log(sparse1);    // => [<empty>, <empty>, <empty>]
																	console.log(sparse1[0]); // => undefined
																	console.log(sparse1[1]); // => undefined
																	const sparse2 = ['white',  ,'blue']
																	console.log(sparse2);    // => ['white', <empty>, 'blue']
																	console.log(sparse2[1]); // => undefined