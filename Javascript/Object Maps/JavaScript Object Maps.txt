JavaScript Object Maps--JAVASCRIPT:

												- A Map holds key-value pairs where the keys can be any datatype.
												- A Map remembers the original insertion order of the keys.
												
	How to Create a Map--JavaScript Object Maps:

		Passing an Array to new Map():
		
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = fruits.get("apples"); // 500
												</script>
		
		Create a Map and use Map.set():
		
												- You can add elements to a Map with the set() method
												- The set() method can also be used to change existing Map values
												
												<script>
												// Create a Map
												const fruits = new Map();
												// Set Map Values
												fruits.set("apples", 500);
												fruits.set("bananas", 300);
												fruits.set("oranges", 200);
												document.getElementById("demo").innerHTML = fruits.get("apples");
												</script>
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],s
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												fruits.set("apples", 200);
												document.getElementById("demo").innerHTML = fruits.get("apples"); // 200
												</script>
												
	Map.get()--JavaScript Object Maps:
	
												The get() method gets the value of a key in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = fruits.get("apples"); // 500
												</script>
												
	Map.size--JavaScript Object Maps:
	
												The size property returns the number of elements in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = fruits.size; // 3
												</script>
												
	Map.delete()--JavaScript Object Maps:
	
												The delete() method removes a Map element
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												// Delete an Element
												fruits.delete("apples");
												document.getElementById("demo").innerHTML = fruits.size; // 2
												</script>
												
	Map.clear()--JavaScript Object Maps:
	
												The clear() method removes all the elements from a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												// Clear the Map
												fruits.clear();
												document.getElementById("demo").innerHTML = fruits.size; // 0
												</script>
												
	Map.has()--JavaScript Object Maps:
	
												The has() method returns true if a key exists in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = fruits.has("apples"); // true
												</script>
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = fruits.has("apples"); // false
												</script>
												
	Maps are Objects--JavaScript Object Maps:
	
												- typeof returns object
												- instanceof Map returns true
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = typeof fruits; // object
												</script>
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												document.getElementById("demo").innerHTML = fruits instanceof Map; // true
												</script>
												
	Map.forEach()--JavaScript Object Maps:
	
												The forEach() method invokes a callback for each key/value pair in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												let text = "";
												fruits.forEach (function(value, key) {
												  text += key + ' = ' + value + "<br>"
												})
												document.getElementById("demo").innerHTML = text; // apples = 500 bananas = 300 oranges = 200
												</script>
												
	Map.entries()--JavaScript Object Maps:
	
												The entries() method returns an iterator object with the [key,values] in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												let text = "";
												for (const x of fruits.entries()) {
												  text += x + "<br>";
												}
												document.getElementById("demo").innerHTML = text; // apples,500 bananas,300 oranges,200
												</script>
												
	Map.keys()--JavaScript Object Maps:
	
												The keys() method returns an iterator object with the keys in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												let text = "";
												for (const x of fruits.keys()) {
												  text += x + "<br>";
												}
												document.getElementById("demo").innerHTML = text; // apples bananas oranges
												</script>
												
	Map.values()--JavaScript Object Maps:
	
												The values() method returns an iterator object with the values in a Map
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												let text = "";
												for (const x of fruits.values()) {
												  text += x + "<br>";
												}
												document.getElementById("demo").innerHTML = text;
												</script>
												
												<script>
												// Create a Map
												const fruits = new Map([
												  ["apples", 500],
												  ["bananas", 300],
												  ["oranges", 200]
												]);
												let total = 0;
												for (const x of fruits.values()) {
												  total += x;
												}
												document.getElementById("demo").innerHTML = total; // 1000
												</script>
												
	Objects as Keys--JavaScript Object Maps:
	
												- Being able to use objects as keys is an important Map feature.
												- Remember: The key is an object (apples), not a string ("apples")
												
												<script>
												// Create Objects
												const apples = {name: 'Apples'};
												const bananas = {name: 'Bananas'};
												const oranges = {name: 'Oranges'};
												// Create a Map
												const fruits = new Map();
												// Add the Objects to the Map
												fruits.set(apples, 500);
												fruits.set(bananas, 300);
												fruits.set(oranges, 200);
												document.getElementById("demo").innerHTML = fruits.get(apples);
												</script>
												
												<script>
												// Create Objects
												const apples = {name: 'Apples'};
												const bananas = {name: 'Bananas'};
												const oranges = {name: 'Oranges'};
												// Create a Map
												const fruits = new Map();
												// Add Elements to the Map
												fruits.set(apples, 500);
												fruits.set(bananas, 300);
												fruits.set(oranges, 200);
												document.getElementById("demo").innerHTML = fruits.get("apples");
												</script>