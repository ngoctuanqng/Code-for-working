Data Type--JAVASCRIPT:						
	Cannot be Redeclared:
								let x = "John Doe";
								let x = 0; // SyntaxError: 'x' has already been declared
								
								var x = "John Doe";
								var x = 0;
	Block Scope:
								{
								  let x = 2;
								}
								// x can NOT be used here
						
								{
								  var x = 2;
								}
								// x CAN be used here
	Redeclaring Variables:
								<!DOCTYPE html>
								<html>
								<body>
								<h2>Redeclaring a Variable Using let</h2>
								<p id="demo"></p>
								<script>
								let  x = 10;
								// Here x is 10
								{  
								  let x = 2;
								  // Here x is 2
								}
								// Here x is 10
								document.getElementById("demo").innerHTML = x;
								</script>
								</body>
								</html>

								<!DOCTYPE html>
								<html>
								<body>
								<h2>Redeclaring a Variable Using var</h2>
								<p id="demo"></p>
								<script>
								var  x = 10;
								// Here x is 10
								{  
								var x = 2;
								// Here x is 2
								}
								// Here x is 2
								document.getElementById("demo").innerHTML = x;
								</script>
								</body>
								</html>
	Redeclaring:
								var x = 2;   // Allowed
								let x = 3;   // Not allowed
								{
									let x = 2;   // Allowed
									let x = 3;   // Not allowed
								}
								{
									let x = 2;   // Allowed
									var x = 3;   // Not allowed
								}

								<!DOCTYPE html>
								<html>
								<body>
								<h2>JavaScript let</h2>
								<p>Redeclaring a JavaScript variable with <b>var</b> is allowed anywhere in a program:</p>
								<p id="demo"></p>
								<script>
								var x = 2;
								// Now x is 2
								var x = 3;
								// Now x is 3
								document.getElementById("demo").innerHTML = x;
								</script>
								</body>
								</html>
	Let Hoisting:
								Variables defined with let are also hoisted to the top of the block, but not initialized. Meaning: Using a let variable before it is declared will result in a ReferenceError
								Variables defined with var are hoisted to the top and can be initialized at any time. Meaning: You can use the variable before it is declared

								// Reference error...
								<!DOCTYPE html>
								<html>
								<body>
								<h2>JavaScript Hoisting</h2>
								<p>With <b>let</b>, you cannot use a variable before it is declared.</p>
								<p id="demo"></p>
								<script>
								try {
								  carName = "Saab";
								  let carName = "Volvo";
								}
								catch(err) {
								  document.getElementById("demo").innerHTML = err;
								}
								</script>
								</body>
								</html>

								// No error
								<!DOCTYPE html>
								<html>
								<body>
								<h2>JavaScript Hoisting</h2>
								<p>With <b>var</b>, you can use a variable before it is declared:</p>
								<p id="demo"></p>
								<script>
								carName = "Volvo";
								document.getElementById("demo").innerHTML = carName;
								var carName;
								</script>
								</body>
								</html>