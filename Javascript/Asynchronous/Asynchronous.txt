Asynchronous--Các kiến thức nền tảng JAVASCRIPT:

	Asynchronous JavaScript:
											In the real world, callbacks are most often used with asynchronous functions.
											A typical example is JavaScript setTimeout().
	
											<!DOCTYPE html>
											<html>
											<body>
											<h2>JavaScript Callbacks</h2>
											<p>Do a calculation and then display the result.</p>
											<p id="demo"></p>
											<script>
											function myDisplayer(something) {
											  document.getElementById("demo").innerHTML = something;
											}
											function myCalculator(num1, num2, myCallback) {
											  let sum = num1 + num2;
											  myCallback(sum);
											}
											myCalculator(5, 5, myDisplayer);
											</script>
											</body>
											</html>
	Waiting for a Timeout:
											When using the JavaScript function setTimeout(), you can specify a callback function to be executed on time-out:												
											<!DOCTYPE html>
											<html>
											<body>
											<h2>JavaScript Callback</h2>
											<p>Wait 3 seconds (3000 milliseconds) for this page to change.</p>
											<h1 id="demo"></h1>
											<script>
											setTimeout(myFunction, 3000);
											function myFunction() {
											  document.getElementById("demo").innerHTML = "I love You !!";
											}
											</script>
											</body>
											</html>
											
											Instead of passing the name of a function as an argument to another function, you can always pass a whole function instead:
											<!DOCTYPE html>
											<html>
											<body>
											<h2>JavaScript SetTimeout()</h2>
											<p>Wait 3 seconds (3000 milliseconds) for this page to change.</p>
											<h1 id="demo"></h1>
											<script>
											setTimeout(function() { myFunction("I love You !!!"); }, 3000);
											function myFunction(value) {
											  document.getElementById("demo").innerHTML = value;
											}
											</script>
											</body>
											</html>
	Waiting for Intervals:
											When using the JavaScript function setInterval(), you can specify a callback function to be executed for each interval:
											
											<!DOCTYPE html>
											<html>
											<body>
											<h2>JavaScript setInterval()</h2>
											<p>Using setInterval() to display the time every second (1000 milliseconds).</p>
											<h1 id="demo"></h1>
											<script>
											setInterval(myFunction, 2000);
											function myFunction() {
											  let d = new Date();
											  document.getElementById("demo").innerHTML=
											  d.getHours() + ":" +
											  d.getMinutes() + ":" +
											  d.getSeconds();
											}
											</script>
											</body>
											</html>
	Waiting for Files:
											If you create a function to load an external resource (like a script or a file), you cannot use the content before it is fully loaded.
											This is the perfect time to use a callback.
											This example loads an HTML file (mycar.html), and displays the HTML file in a web page, after the file is fully loaded:
											
											<!DOCTYPE html>
											<html>
											<body>
											<h2>JavaScript Callbacks</h2>
											<p id="demo"></p>
											<script>
											function myDisplayer(some) {
											  document.getElementById("demo").innerHTML = some;
											}
											function getFile(myCallback) {
											  let req = new XMLHttpRequest();
											  req.open('GET', "mycar.html");
											  req.onload = function() {
												if (req.status == 200) {
												  myCallback(this.responseText);
												} else {
												  myCallback("Error: " + req.status);
												}
											  }
											  req.send();
											}
											getFile(myDisplayer); 
											</script>
											</body>
											</html>