JSON--JAVASCRIPT:

	JSON.parse()
		Parse the data with JSON.parse(), and the data becomes a JavaScript object.
		
			const txt = '{"name":"John", "age":30, "city":"New York"}'
			const obj = JSON.parse(txt);
			document.getElementById("demo").innerHTML = obj.name + ", " + obj.age;
			
		Parsing Dates
		
			- Date objects are not allowed in JSON.
			- If you need to include a date, write it as a string.
			- You can convert it back into a date object later:
			
				const text = '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
				const obj = JSON.parse(text);
				obj.birth = new Date(obj.birth);
				document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;
				
			Or, you can use the second parameter, of the JSON.parse() function, called reviver.
			
				const text = '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
				const obj = JSON.parse(text, function (key, value) {
				  if (key == "birth") {
					return new Date(value);
				  } else {
					return value;
				  }
				});
				document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth;
				
		Parsing Functions
		
			- You should avoid using functions in JSON, the functions will lose their scope, and you would have to use eval() to
			- convert them back into functions.
			- Functions are not allowed in JSON.
			- If you need to include a function, write it as a string.
			- You can convert it back into a function later:
			
				const text = '{"name":"John", "age":"function() {return 30;}", "city":"New York"}';
				const obj = JSON.parse(text);
				obj.age = eval("(" + obj.age + ")");
				document.getElementById("demo").innerHTML = obj.name + ", " + obj.age();
	
	JSON.stringify()
	
		A common use of JSON is to exchange data to/from a web server.
		When sending data to a web server, the data has to be a string.
		Convert a JavaScript object into a string with JSON.stringify().
		
		const obj = {name: "John", age: 30, city: "New York"};
		const myJSON = JSON.stringify(obj);
		document.getElementById("demo").innerHTML = myJSON;
		
		Storing Data
		
			When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the
			legal formats.
			JSON makes it possible to store JavaScript objects as text.
			
			// Storing data:
			const myObj = { name: "John", age: 31, city: "New York" };
			const myJSON = JSON.stringify(myObj);
			localStorage.setItem("testJSON", myJSON);
			// Retrieving data:
			let text = localStorage.getItem("testJSON");
			let obj = JSON.parse(text);
			document.getElementById("demo").innerHTML = obj.name;
			
		Exceptions
		
			In JSON, date objects are not allowed. The JSON.stringify() function will convert any dates into strings.
			In JSON, functions are not allowed as object values.
			The JSON.stringify() function will remove any functions from a JavaScript object, both the key and the value:
			
			const obj = {name: "John", today: new Date(), city: "New York"};
			const myJSON = JSON.stringify(obj);
			document.getElementById("demo").innerHTML = myJSON;