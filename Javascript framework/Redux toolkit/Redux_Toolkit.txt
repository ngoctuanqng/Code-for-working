-- V√≠ d·ª•

// 1. Setup todo slice
// todoSlice.js
const todoSlice = createSlice({
  name: 'todos',
  initialState: [],
  reducers: {
    addTodo(state, action) {
      state.push(action.payload);
    },
    removeTodo(state, action) {
      state.splice(action.payload, 1);
    }
  }
});

const { actions, reducer } = todoSlice;
export const { addTodo, removeTodo } = actions;
export default reducer;


// 2. Setup redux store
// store.js
import { configureStore } from '@reduxjs/toolkit';
import todoReducer from 'features/todos/todoSlice';

const store = configureStore({
  reducer: {
    todos: todoReducer,
  },
});


// 3. Bind Redux Provider to App
// src/index.js
import { Provider } from 'react-redux';
import store from './store';
import App from './App';

function Main() {
  return (
    <Provider store={store}>
      <App />
    </Provider>
  );
}


// 4. Using redux in component
// todo.jsx
import { useDispatch, useSelector } from 'react-redux';
import { removeTodo } from 'features/todos/todoSlice';

function Todo() {
  const dispatch = useDispatch();
  const todoList = useSelector(state => state.todos);

  const handleTodoClick = (todo, idx) => {
    const action = removeTodo(idx);
    dispatch(action);
  };

  return (
    <ul>
      {todoList.map((todo, idx) => (
        <li key={todo.id} onClick={() => handleTodoClick(todo, idx)}>
          {todo.title}
        </li>
      ))}
    </ul>
  );
}


-- C·∫•u h√¨nh Redux Store

// store/index.js

import { configureStore } from "@reduxjs/toolkit";
import userReducer from "./userSlice";

export const store = configureStore({
  reducer: {
    user: userReducer  // Khai b√°o 1 slice t√™n l√† user v·ªõi gi√° tr·ªã l√† userReducer ƒë∆∞·ª£c export ·ªü file userSlice
    // C√≥ th·ªÉ khai b√°o nhi·ªÅu slice kh√°c t∆∞∆°ng t·ª±
  }
});



import React from "react";
import ReactDOM from "react-dom";
import { Provider } from "react-redux";
import { store } from "./store/index";

import App from "./App";

// B·ªçc App component v√†o trong Store Provider ƒë·ªÉ App v√† to√†n b·ªô Component con ƒë·ªÅu c√≥ th·ªÉ truy xu·∫•t ƒë·∫øn Store
ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById("root")
);



// store/userSlice.js

import { createSlice } from "@reduxjs/toolkit";

// Kh·ªüi t·∫°o state cho slice, c√≥ th·ªÉ k√®m gi√° tr·ªã m·∫∑c ƒë·ªãnh ban ƒë·∫ßu
const initialState = {
  username: "Guest"  // State username v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† "Guest"
  // C√≥ th·ªÉ khai b√°o nhi·ªÅu state kh√°c n·ªØa
};

// C·∫•u h√¨nh slice
export const userSlice = createSlice({
  name: "user",  // T√™n c·ªßa slice, m·ªói slice ƒë·∫∑t 1 t√™n kh√°c nhau ƒë·ªÉ ph√¢n bi·ªát
  initialState,
  // Reducers ch·ª©a c√°c h√†m x·ª≠ l√Ω c·∫≠p nh·∫≠t state
  reducers: {
    updateUsername: () => {},
  }
});

// Export action ra ƒë·ªÉ s·ª≠ d·ª•ng cho ti·ªán.
export const { updateUsername } = userSlice.actions;

// Action l√† 1 h√†m tr·∫£ v·ªÅ object d·∫°ng {type, payload}, ch·∫°y th·ª≠ console.log(updateUsername()) ƒë·ªÉ xem chi ti·∫øt

// H√†m gi√∫p l·∫•y ra state mong mu·ªën.
// H√†m n√†y c√≥ 1 tham s·ªë l√† root state l√† to√†n b·ªô state trong store, ch·∫°y th·ª≠ console.log(state) trong n·ªôi dung h√†m ƒë·ªÉ xem chi ti·∫øt
export const selectUsername = state => state.user.username;

// Export reducer ƒë·ªÉ nh√∫ng v√†o Store
export default userSlice.reducer;



-- T∆∞∆°ng t√°c v·ªõi Redux Store

import React, { useState } from "react";
import { useHistory } from "react-router-dom";

// Import hook useDispatch t·ª´ react-redux v√† action updateUsername t·ª´ userSlice
import { useDispatch } from "react-redux";
import { updateUsername } from "../store/userSlice";

export default function Login() {
  const [username, setUsername] = useState("");
  const history = useHistory();

  const dispatch = useDispatch();

  function handleLogin() {
    // Dispatch action updateUsername v√†o store, action n√†y c√≥ payload (d·ªØ li·ªáu ƒëi k√®m) l√† username
    dispatch(updateUsername(username));

    history.push("/dashboard");
  }

  ...

}



reducers: {
  // H√†m c√≥ 2 tham s·ªë l√† state hi·ªán t·∫°i v√† action truy·ªÅn v√†o
  updateUsername: (state, action) => {
    // C·∫≠p nh·∫≠t state username v·ªõi gi√° tr·ªã truy·ªÅn v√†o qua action (action.payload)
    // Ch·∫°y th·ª≠ console.log(action) ƒë·ªÉ xem chi ti·∫øt gi√° tr·ªã action truy·ªÅn v√†o
    state.username = action.payload;
  }
}



import React from "react";
import { Link } from "react-router-dom";

// Import hook useSelector t·ª´ react-redux v√† h√†m selectUsername t·ª´ userSlice
import { useSelector } from "react-redux";
import { selectUsername } from "../store/userSlice";

export default function Dashboard() {
  // L·∫•y ra state username t·ª´ store
  // H√†m useSelector c·∫ßn truy·ªÅn v√†o 1 h√†m callback c√≥ tham s·ªë l√† root state v√† tr·∫£ v·ªÅ state c·∫ßn l·∫•y
  const username = useSelector(selectUsername);

  return (
    <>
      <h1>Dashboard</h2>

      {/* In bi·∫øn username ra m√†n h√¨nh */}
      <h2>Welcome {username}</h2>

      <Link to="/login">Log out</Link>
    </>
  );
}


-- M·ªôt s·ªë API hay d√πng

	-- configureStore()
	
	// Khi ƒë√£ c√≥ redux toolkit // th√¨ store.js s·∫Ω :

	import { configureStore } from '@reduxjs/toolkit'
	import rootReducer from './reducers'// xem m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o reducerconststore=configureStore({ reducer: rootReducer })

	export default store;// t·∫°o store th·∫≠t ng·∫Øn g·ªçn
	
	
	-- createReducer()
	
	// C√≥ Redux Toolkit
	// - M·ªói key l√† m·ªôt case
	// - Kh√¥ng c·∫ßn handle default case
	const counterReducer = createReducer(0, {
	  increment: (state, action) => state + action.payload,
	  decrement: (state, action) => state - action.payload
	});




	// M·ªôt ƒëi·ªÉm hay n·ªØa l√† reducer c√≥ th·ªÉ mutate data tr·ª±c ti·∫øp.
	// B·∫£n ch·∫•t b√™n d∆∞·ªõi h·ªç s·ª≠ d·ª•ng th∆∞ vi·ªán ImmerJS
	const todoReducer = createReducer([], {
	  addTodo: (state, action) => {
		// 1. C√≥ th·ªÉ mutate data tr·ª±c ti·∫øp üéâ
		state.push(action.payload);
	  }
	});

	const addTodoWithoutImmerJS = (state, action) => {
	  // Ho·∫∑c ph·∫£i tr·∫£ v·ªÅ state m·ªõi
	  // CH·ª® KH√îNG ƒê∆Ø·ª¢C C·∫¢ 1 V√Ä 2 nha üòé
	  const newState = [...state];
	  newState.push(action.payload);
	  return newState;
	};

	-- createAction()
	
	// C√≥ redux toolkit
	const increment = createAction('counter/increment');

	const action = increment(3);
	// returns { type: 'counter/increment', payload: 3 }

	console.log(increment.toString());
	// 'counter/increment'