	Map--JAVA:				
							Map: Lưu trữ các cặp key/value, key của các phần tử này là duy nhất. SortedMap: Là một dạng riêng của Map interface, trong đó key được sắp xếp theo thứ tự tăng dần.
							HashMap: Extends AbstractMap để sử dụng bảng băm. HashMap là một phần trong java collections. Nó cung cấp triển khai cơ bản của Map interface. Được sử dụng để lưu trữ dữ
									 liệu theo cặp key-value. Để truy cập một giá trị, ta phải biết key của nó.
							TreeMap: Extends AbstractMap để sử dụng tree. TreeMap được sử dụng để triển khai Map interface và NavigableMap. TreeMap sắp xếp các phần tử theo thứ tự tự nhiên dựa vào key
							         hoặc bởi Comparator được cung cấp tại thời điểm map được tạo, tùy vào constructor nào được sử dụng
							WeakHashMap: Extends AbstractMap để sử dụng bảng băm với các khóa yếu.
							LinkedHashMap: Extends HashMap, cho phép lặp lại thứ tự chèn. LinkedHashMap cũng tương tự HashMap nhưng nó được bổ sung tính năng là duy trì thứ tự chèn vào map. HashMap có
							               lợi thế là chèn, tìm kiếm và xóa nhanh chóng nhưng nó không bao giờ duy trì thứ tự chèn. Khi muốn duy trì thứ tự chèn ta có thể sử dụng LinkedHashMap
							IdentityHashMap: Extends AbstractMap
							Map.Entry interface: Entry là một interface con của Map. Vì vậy, chúng ta có thể truy cập nó bằng tên Map.Entry. Nó cung cấp các phương thức để truy xuất key và value
							Map từ Java khi chuyển qua Javascript sẽ ở dạng object.
							
							Map<String, Integer> map = new HashMap<>();
							map.put("A", 1);
							map.put("B", 2);
							map.put("C", 3);
		Khởi tạo:
		
							- keySet và entrySet sẽ hoàn lại 1 Set
							- values sẽ hoàn lại 1 Collection
							- Trong Java, "entry" thường được sử dụng để đề cập đến một cặp khóa-giá trị trong một cấu trúc dữ liệu như một Map. Một "entry" trong Java thường đại diện cho một phần tử trong một Map, nơi mỗi
							phần tử được lưu trữ dưới dạng một cặp khóa-giá trị.
		
							Map<String, Integer> map1 = new HashMap<>();
							
							Map<String, Integer> map2 = Map.of("apple", 10, "banana", 20);
							
							Map<String, Integer> map3 = new HashMap<>() {{
								put("apple", 10);
								put("banana", 20);
							}};
							
							Map<String, Integer> map4 = new HashMap<>();
							map4.putAll(Map.of("apple", 10, "banana", 20));
							
							Map<String, Integer> map5 = new HashMap<>();
							map5.computeIfAbsent("apple", key -> 10);
							map5.computeIfAbsent("banana", key -> 20);
							
							Map<String, Integer> map6 = new HashMap<>();
							map6.computeIfPresent("apple", (key, value) -> value + 10);
							map6.computeIfPresent("banana", (key, value) -> value + 20);
							
							Map<String, Integer> map7 = new HashMap<>();
							map7.merge("apple", 10, Integer::sum);
							map7.merge("banana", 20, Integer::sum);
							
							Map<String, Integer> map8 = new HashMap<>();
							map8.putIfAbsent("apple", 10);
							map8.putIfAbsent("banana", 20);
							
							Map<String, Integer> map9 = new HashMap<>();
							map9.put("A", 1);
							map9.put("B", 2);
							map9.put("C", 3);
							
							Map<Integer, String> map = new LinkedHashMap<>();
							map.put(5, "Java");
							map.put(1, "HTML/CSS");
							map.put(7, "Python");
							map.put(4, "C/C++");

							Map<Integer, String> map = new TreeMap<Integer, String>(new Comparator<Integer>() {
								@Override
								public int compare(Integer o1, Integer o2) {
									return o2.compareTo(o1);
								}
							});
							map.put(5, "Ford");
							map.put(1, "Suzuki");
							map.put(7, "Mercedes");
							map.put(4, "Mazda");
		- put:				
							map.put("D", 4);
							for (Map.Entry<String, Integer> entry : map.entrySet()) {
								System.out.println(entry.getKey() + ": " + entry.getValue()); // 1 2 3 4
							}
		putAll:				
							Map<String, Integer> anotherMap = new HashMap<>();
							anotherMap.put("D", 4);
							anotherMap.put("E", 5);
							map.putAll(anotherMap); // Sử dụng phương thức putAll để thêm tất cả các cặp key-value từ anotherMap vào map. 1 2 3 4 5
		- get:				Integer valueB = map.get("B"); // Sử dụng phương thức get để lấy giá trị tương ứng với key "B". 2
		- remove:
							Map<String, Integer> map = new HashMap<>();
							map.put("apple", 10);
							map.put("banana", 20);
							map.remove("apple");
							System.out.println(map); // Output: {banana=20}
		- isEmpty:
							Map<String, Integer> map = new HashMap<>();
							System.out.println(map.isEmpty()); // Output: true
		- size:
							Map<String, Integer> map = new HashMap<>();
							map.put("apple", 10);
							map.put("banana", 20);
							System.out.println(map.size()); // Output: 2
		- clear:
							Map<String, Integer> map = new HashMap<>();
							map.put("apple", 10);
							map.put("banana", 20);
							map.clear();
							System.out.println(map); // Output: {}
		- containsKey:		
							boolean containsKeyB = map.containsKey("B"); // Kiểm tra xem key "B" có tồn tại trong map hay không. true
							boolean containsKeyD = map.containsKey("D"); // Kiểm tra xem key "D" có tồn tại trong map hay không. false
		- containsValue:		
							boolean containsValue2 = map.containsValue(2); // Kiểm tra xem giá trị 2 có tồn tại trong map hay không. true
							boolean containsValue4 = map.containsValue(4); // Kiểm tra xem giá trị 4 có tồn tại trong map hay không. false
		- keySet:				
							Set<String> keySet = map.keySet(); // Sử dụng phương thức keySet để lấy tập hợp chứa tất cả các key
							for (String key : keySet) {
								System.out.println(key); // A B C
							}
		- values:				
							Collection<Integer> values = map.values(); // Sử dụng phương thức values để lấy Collection chứa tất cả các giá trị
							for (Integer value : values) {
								System.out.println(value); // 1 2 3
							}
		- entrySet:			
							Set<Entry<String, Integer>> entrySet = map.entrySet(); // Sử dụng phương thức entrySet để lấy Set chứa tất cả các cặp key-value
							for (Entry<String, Integer> entry : entrySet) {
								System.out.println(entry.getKey() + ": " + entry.getValue()); // A: 1. B: 2. C: 3 
							}
							
							Map<Integer, String> map = new HashMap<>();
							map.put(5, "Anna");
							map.put(1, "John");
							map.put(7, "Chris");
							map.put(4, "Ryan");							
							for(Map.Entry<Integer, String> entry : map.entrySet()){ //Sử dụng Map.Entry
								System.out.println(entry.getKey() + " - " +entry.getValue());
							}
		Note:
							- Vấn đề là khi bạn thêm listResult2 vào listResult1, thì thực chất bạn đang thêm một tham chiếu đến đối tượng listResult2 vào listResult1. Vì vậy, tất cả các phần tử trong listResult1 sẽ cùng trỏ đến
							cùng một đối tượng listResult2.
							- Khi bạn gọi phương thức clear() trên listResult2, nó sẽ xóa tất cả các cặp key-value trong đối tượng listResult2. Do listResult1 chỉ chứa các tham chiếu đến đối tượng listResult2, nên khi phương thức
							clear() được gọi, tất cả các phần tử trong listResult1 cũng sẽ thấy sự thay đổi và chứa các giá trị rỗng.
							- serviceLifecycle thực chất là 1 đối tượng của service
							
							@Override
							public List<Map<String, Object>> getAllProjectListViewWithEmpId(ServiceLifecycle serviceLifecycle, String empId) {
									List<Object[]> listResult = new ArrayList<>();
									List<Map<String, Object>> listResult1 = new ArrayList<>();
									Map<String, Object> listResult2 = new HashMap<>();
									listResult = this.store.getAllProjectListViewWithEmpId();
									for (Object[] object : listResult) {
										listResult2.put("Project Name", object[0]);
										listResult2.put("Task Count", object[1]);
										listResult2.put("Finished Count", object[2]);
										listResult2.put("Finished (%)", object[3]);
										listResult2.put("Testing Count", object[4]);
										listResult2.put("Testing (%)", object[5]);
										listResult2.put("Remain Count", object[6]);
										listResult2.put("Remain (%)", object[7]);
										listResult2.put("Delayed Count", object[8]);
										listResult2.put("Delayed (%)", object[9]);
										listResult1.add(listResult2);
										listResult2.clear();
									}
									return listResult1;
							}
							
							- Trong mỗi vòng lặp for, một đối tượng listResult2 mới được tạo và các giá trị được thêm vào đối tượng này. Sau đó, đối tượng listResult2 được thêm vào listResult1. Do đó, không có sự chia sẻ tham
							chiếu giữa các đối tượng listResult2 được tạo trong mỗi vòng lặp.
							- Mỗi phần tử trong listResult1 đều chứa một đối tượng listResult2 riêng biệt, chứa các giá trị khác nhau tùy thuộc vào vòng lặp hiện tại. Điều này đảm bảo không có mất tham chiếu và mỗi phần tử trong
							listResult1 đều giữ giá trị của nó.
							- Trong mỗi vòng lặp, một đối tượng listResult2 mới được tạo bằng cách sử dụng constructor new HashMap<>(). Điều này đảm bảo mỗi đối tượng listResult2 trong từng vòng lặp đều là một đối tượng riêng
							biệt, không chia sẻ tham chiếu với nhau.
							Sau khi kết thúc vòng lặp for, listResult1 vẫn giữ giá trị của các phần tử được thêm vào từ các đối tượng listResult2 trong mỗi vòng lặp. Mất tham chiếu của biến listResult2 không ảnh hưởng đến giá
							trị của listResult1.
							
							listResult = this.store.getAllProjectListViewWithEmpId();
							for (Object[] object : listResult) {
								Map<String, Object> listResult2 = new HashMap<>();
								listResult2.put("Project Name", object[0]);
								listResult2.put("Task Count", object[1]);
								listResult2.put("Finished Count", object[2]);
								listResult2.put("Finished (%)", object[3]);
								listResult2.put("Testing Count", object[4]);
								listResult2.put("Testing (%)", object[5]);
								listResult2.put("Remain Count", object[6]);
								listResult2.put("Remain (%)", object[7]);
								listResult2.put("Delayed Count", object[8]);
								listResult2.put("Delayed (%)", object[9]);
								listResult1.add(listResult2);
							}
							return listResult1;