Exception--JAVA:

													Lợi thế cốt lõi của việc xử lý ngoại lệ là duy trì luồng bình thường của ứng dụng. Ngoại lệ thường làm gián đoạn luồng bình
													thường của ứng dụng khi chương trình chạy đó là lý do tại sao chúng ta sử dụng xử lý ngoại lệ.

	ArithmeticException:							
	
													Nếu chúng ta chia bất kỳ số nào cho số 0, xảy ra ngoại lệ ArithmeticException.		
	
													int a = 10 / 0; // ArithmeticException
	
	NullPointerException:							
													
													Nếu một bất kỳ biến nào có giá trị null, thực hiện bất kỳ hoạt động nào bởi biến đó sẽ xảy ra ngoại lệ NullPointerException.
													
													String obj = null;
													System.out.println(obj .length()); // NullPointerException
	
	NumberFormatException:							
													
													Một biến String có giá trị là các ký tự, chuyển đổi biến này thành số sẽ xảy ra NumberFormatException.
													
													String str = "abc"; 
													int num = Integer.parseInt(str); // NumberFormatException
	
	ArrayIndexOutOfBoundsException:					
													
													Nếu bạn chèn bất kỳ giá trị nào vào index sai, sẽ xảy ra ngoại lệ ArrayIndexOutOfBoundsException.
													
													int arr[] = new int[5];
													arr[5] = 50; // ArrayIndexOutOfBoundsException
	ClassCastException:								
													
													Nếu không thể chuyển kiểu object này sang kiểu object khác, sẽ xảy ra ngoại lệ ClassCastException.
													
													Object dog = new Dog();
													Rectangle rect = (Rectangle) dog; // Nếu không thể chuyển kiểu object này sang kiểu object khác, sẽ xảy ra ngoại lệ ClassCastException.

	Java NullPointerException:
	
		NullPointerException when calling an instance method:
																								
																								public class Temp {
																									public static void main(String[] args) {
																										Temp t = initT();
																										t.foo("Hi");
																									}
																									private static Temp initT() {
																										return null;
																									}
																									public void foo(String s) {
																										System.out.println(s.toLowerCase());
																									}
																								}
		
		Java NullPointerException while accessing/modifying field of a null object:
																								
																								public class Temp {
																									public int x = 10;
																									public static void main(String[] args) {
																										Temp t = initT();
																										int i = t.x;
																									}
																									private static Temp initT() {
																										return null;
																									}
																								}
		
		Java NullPointerException when null is passed in method argument:
																								
																								public class Temp {
																									public static void main(String[] args) {
																										foo(null);
																									}
																									public static void foo(String s) {
																										System.out.println(s.toLowerCase());
																									}
																								}
		
		java.lang.NullPointerException when null is thrown:
																								
																								public class Temp {
																									public static void main(String[] args) {
																										throw null;
																									}
																								}
		
		NullPointerException when getting the length of null array:
																								
																								public class Temp {
																									public static void main(String[] args) {
																										int[] data = null;																											
																										int len = data.length;
																									}
																								}
		
		NullPointerException when synchronized on a null object:
																								
																								public class Temp {
																									public static String mutex = null;																										
																									public static void main(String[] args) {
																										synchronized(mutex) {
																											System.out.println("synchronized block");
																										}		
																									}
																								}